#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.60.6)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Plane", "clipBox", "Rotater"]
    def Cube "Plane" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Plane/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 0.1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material"
        {
            prepend token outputs:mtlx:surface.connect = </Root/Plane/Material/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (300, 99.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor = (1, 0.14913142, 0) (
                    colorSpace = "srgb_texture"
                )
                token outputs:out
                float2 ui:nodegraph:node:pos = (74.5, 99.5)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 1
            }
        }
    }

    def Cube "Rotater" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Rotater/DefaultMaterial>
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:mtlx:surface.connect = </Root/Rotater/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Rotater/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor = (0.999996, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                color3f inputs:emissiveColor = (1, 1, 1) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:opacity = 0
                float inputs:opacityThreshold = 1
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 13
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:diffuseColor", "inputs:metallic"]
            }
        }
    }

    def Cube "clipBox" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/clipBox/DefaultMaterial>
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:mtlx:surface.connect = </Root/clipBox/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/clipBox/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (73.37109, 104.86719)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 76

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor = (0.999996, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                color3f inputs:emissiveColor = (0.921431, 0.92145264, 0.921441) (
                    colorSpace = "srgb_texture"
                )
                float inputs:metallic
                float3 inputs:normal
                float inputs:occlusion = 0
                float inputs:opacity = 0.9
                float inputs:opacity.connect = </Root/clipBox/DefaultMaterial/Separate4.outputs:outa>
                float inputs:opacityThreshold
                float inputs:roughness = 1
                token outputs:out
                float2 ui:nodegraph:node:pos = (-178.70312, 21.3125)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 97
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:diffuseColor", "inputs:opacity", "inputs:metallic", "inputs:clearcoat", "inputs:metallic", "inputs:diffuseColor"]
            }

            def Shader "Separate4"
            {
                uniform token info:id = "ND_separate4_color4"
                color4f inputs:in.connect = </Root/clipBox/DefaultMaterial/Over.outputs:out>
                float outputs:outa
                float outputs:outb
                float outputs:outg
                float2 ui:nodegraph:node:pos = (-373.02734, 32.273438)
                float2 ui:nodegraph:node:size = (117, 163)
                int ui:nodegraph:node:stackingOrder = 94
            }

            def Shader "Over"
            {
                uniform token info:id = "ND_over_color4"
                color4f inputs:bg
                color4f inputs:fg
                float inputs:mix
                color4f outputs:out
                float2 ui:nodegraph:node:pos = (-515.6289, 176.26172)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 93
            }
        }
    }
}

