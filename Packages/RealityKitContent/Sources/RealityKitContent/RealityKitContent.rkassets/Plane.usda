#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.60.6)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["clipMaterial", "root", "clipPlane", "clipBoxY", "clipBoxX", "clipBoxZ", "Rotater"]
    def Cube "Rotater" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Rotater/DefaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.7000000000000001
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:mtlx:surface.connect = </Root/Rotater/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Rotater/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor = (0.999996, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                color3f inputs:emissiveColor = (1, 1, 1) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:opacity = 0
                float inputs:opacityThreshold = 1
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 17
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:diffuseColor", "inputs:metallic"]
            }
        }
    }

    def Cube "clipBoxZ" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/clipMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 1.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0, 0, -0.55)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1, 1, 0)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }

    def Cube "clipBoxY" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["clipMaterial", "InputTarget", "Collider"]
        rel material:binding = </Root/clipMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 1.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 2.220446e-16, 1)
        float3 xformOp:translate = (0, -0.55, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1, 0, 1)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }

    def Cube "clipBoxX" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/clipMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 1.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (2.220446e-16, 1, 1)
        float3 xformOp:translate = (-0.55, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0, 1, 1)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }

    def Material "clipMaterial"
    {
        token outputs:mtlx:surface.connect = </Root/clipMaterial/PreviewSurface_1.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/clipBoxZ/DefaultMaterial/GeometryModifier.outputs:out>
        token outputs:surface.connect = </Root/clipBoxZ/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (524.79297, -76.46484)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 550

        def Shader "DefaultSurfaceShader" (
            active = false
        )
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:roughness = 0.75
            token outputs:surface
        }

        def Shader "PreviewSurface_1"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness = 0
            color3f inputs:diffuseColor = (0.14566965, 0.3038709, 1) (
                colorSpace = "srgb_texture"
            )
            color3f inputs:emissiveColor = (0.6642242, 0.66424006, 0.66423154) (
                colorSpace = "srgb_texture"
            )
            float inputs:ior = 0
            float inputs:metallic
            float3 inputs:normal = (0, 0, 0)
            float inputs:occlusion = 0
            float inputs:opacity = 0
            float inputs:opacity.connect = </Root/clipMaterial/Max_1.outputs:out>
            float inputs:opacityThreshold = 1
            float inputs:roughness = 1
            token outputs:out
            float2 ui:nodegraph:node:pos = (268.00882, -22.415154)
            float2 ui:nodegraph:node:size = (161, 307)
            int ui:nodegraph:node:stackingOrder = 579
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:opacity", "Advanced", "inputs:normal", "inputs:metallic", "inputs:metallic", "inputs:opacity", "inputs:metallic", "inputs:roughness", "inputs:diffuseColor", "inputs:diffuseColor"]
        }

        def Shader "Texcoord"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-670.41296, -101.20473)
            float2 ui:nodegraph:node:size = (182, 53)
            int ui:nodegraph:node:stackingOrder = 570
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1
            float inputs:in2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-576.54083, -5.0584855)
            float2 ui:nodegraph:node:size = (61, 36)
            int ui:nodegraph:node:stackingOrder = 518
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-754.50494, 11.646136)
            float2 ui:nodegraph:node:size = (146, 53)
            int ui:nodegraph:node:stackingOrder = 518
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/clipMaterial/Texcoord.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-474.52682, -91.5103)
            float2 ui:nodegraph:node:size = (116, 127)
            int ui:nodegraph:node:stackingOrder = 571
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
        }

        def Shader "Ifgreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:value1.connect = </Root/clipMaterial/Max.outputs:out>
            float inputs:value2 = 0.98
            float outputs:out
            float2 ui:nodegraph:node:pos = (-94.85547, -119.98047)
            float2 ui:nodegraph:node:size = (109, 163)
            int ui:nodegraph:node:stackingOrder = 573
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1.connect = </Root/clipMaterial/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/clipMaterial/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-288.1328, -120.07031)
            float2 ui:nodegraph:node:size = (114, 40)
            int ui:nodegraph:node:stackingOrder = 530
        }

        def Shader "Min"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/clipMaterial/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/clipMaterial/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-311.58984, -47.89453)
            float2 ui:nodegraph:node:size = (114, 40)
            int ui:nodegraph:node:stackingOrder = 531
        }

        def Shader "Max_1"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1.connect = </Root/clipMaterial/Ifgreater.outputs:out>
            float inputs:in2.connect = </Root/clipMaterial/Ifgreater_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (74.359375, -48.140625)
            float2 ui:nodegraph:node:size = (123, 53)
            int ui:nodegraph:node:stackingOrder = 572
        }

        def Shader "Ifgreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:value1 = 0.02
            float inputs:value1.connect = None
            float inputs:value2.connect = </Root/clipMaterial/Min.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-93.06641, 55.382812)
            float2 ui:nodegraph:node:size = (115, 163)
            int ui:nodegraph:node:stackingOrder = 574
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1", "inputs:value2", "inputs:value2"]
        }
    }

    def Cube "root" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/root/DefaultMaterial>
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:mtlx:surface.connect = </Root/root/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/root/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:opacity = 0
                float inputs:opacityThreshold = 1
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 3
            }
        }
    }
}

