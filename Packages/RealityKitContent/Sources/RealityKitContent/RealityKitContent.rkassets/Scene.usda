#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["placeHolder_X_Positive", "placeHolder_X_Negative", "placeHolder_Y_Positive", "placeHolder_Y_Negative", "placeHolder_Z_Positive", "placeHolder_Z_Negative", "transfer", "opacityCorrection", "trim", "trim_1"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Cube "placeHolder_X_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_X_Positive/Material_X> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, -0.009785518)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_X"
        {
            reorder nameChildren = ["trim_1", "opacityCorrection_1", "Image_1", "transfer_1", "UnlitSurface_1", "Image", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual"]
            asset inputs:Image = @image.jpeg@ (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-248.30103, -104.44954)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 3914
                    }
                }
            )
            float inputs:opacityCorrection = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (685.88074, 112.75099)
                        float2 sizeInSubgraph = (180, 53)
                        int stackingOrderInSubgraph = 3959
                    }
                }
            )
            float inputs:smoothStepShift = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1285.9348, -22.808966)
                        float2 sizeInSubgraph = (173, 53)
                        int stackingOrderInSubgraph = 3984
                    }
                }
            )
            float inputs:smoothStepStart = 0.1 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1253.8859, 50.720467)
                        float2 sizeInSubgraph = (174, 53)
                        int stackingOrderInSubgraph = 3984
                    }
                }
            )
            float inputs:x = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (314.8312, 84.357735)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3959
                    }
                }
            )
            float inputs:XLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (320.10336, 146.76979)
                        float2 sizeInSubgraph = (112, 53)
                        int stackingOrderInSubgraph = 3959
                    }
                }
            )
            float inputs:y = 1 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-115.27499, 144.62747)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3988
                    }
                }
            )
            float inputs:z = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-39.322292, 217.72873)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3959
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_X_Positive/Material_X/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2156.4065, 86.74538)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3371

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_X_Positive/Material_X/Dot_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0
                float inputs:opacity.connect = </Root/placeHolder_X_Positive/Material_X/transfer_1.outputs:return>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1902.8978, 100.71924)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 3927
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:color", "inputs:opacityThreshold", "inputs:applyPostProcessToneMap"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Positive/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (0.47951108, 10.171405)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3910
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file", "inputs:default", "inputs:uaddressmode", "inputs:texcoord"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 2816
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_X_Positive/Material_X/Image.outputs:out>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_X_Positive/Material_X.inputs:y>
                float inputs:z (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (331.23166, 95.70417)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2818
                        }
                    }
                )
                float inputs:z.connect = </Root/placeHolder_X_Positive/Material_X.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (178.67715, 143.24005)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3959
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "outputs:Min_out"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2822

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Separate2.outputs:outx>
                    float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Subtract.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:z>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (483.59375, 123.83984)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 2815
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = None
                float inputs:in2 = 0
                float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.outputs:Min_out>
                float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X.inputs:x>
                float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X.inputs:XLayer>
                float outputs:out
                float2 ui:nodegraph:node:pos = (489.77817, 146.14174)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 3959
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }

            def "opacityCorrection_1" (
                active = true
                instanceable = true
                references = </Root/opacityCorrection>
            )
            {
                float inputs:opacityCorrection (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (461.80106, -156.40652)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 1106
                        }
                    }
                )
                float inputs:opacityCorrection.connect = </Root/placeHolder_X_Positive/Material_X.inputs:opacityCorrection>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (485.76352, -284.85245)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 1089
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_X_Positive/Material_X/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (895.90735, 131.34763)
                float2 ui:nodegraph:node:size = (176, 127)
                int ui:nodegraph:node:stackingOrder = 3959
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:opacityCorrection"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145.5, 81)
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Positive/Material_X/Dot.outputs:out>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (781.1528, -259.93323)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3921
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file", "inputs:default"]
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (519.5298, 268.8333)
                            float2 sizeInSubgraph = (116.5, 53)
                            int stackingOrderInSubgraph = 3252
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_X_Positive/Material_X/opacityCorrection_1.outputs:return>
                float2 ui:nodegraph:node:pos = (1099.9236, 142.50877)
                float2 ui:nodegraph:node:size = (105, 109)
                int ui:nodegraph:node:stackingOrder = 3959
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ocopacity", "inputs:y", "inputs:Ocopacity", "inputs:Ocopacity", "outputs:Min_out", "inputs:Opacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (152, 81)
            }

            def Shader "Dot"
            {
                uniform token info:id = "ND_dot_filename"
                asset inputs:in.connect = </Root/placeHolder_X_Positive/Material_X.inputs:Image>
                asset outputs:out
                float2 ui:nodegraph:node:pos = (-123.51974, -291.14087)
                float2 ui:nodegraph:node:size = (44, 18)
                int ui:nodegraph:node:stackingOrder = 3917
            }

            def Shader "Dot_1"
            {
                uniform token info:id = "ND_dot_color3"
                color3f inputs:in.connect = </Root/placeHolder_X_Positive/Material_X/Image_1.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1657.2253, -135.03653)
                float2 ui:nodegraph:node:size = (44, 18)
                int ui:nodegraph:node:stackingOrder = 3924
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepShift (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepShift.connect = </Root/placeHolder_X_Positive/Material_X.inputs:smoothStepShift>
                float inputs:smoothStepStart (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepStart.connect = </Root/placeHolder_X_Positive/Material_X.inputs:smoothStepStart>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_X_Positive/Material_X/trim_1.outputs:Min_out>
                float outputs:return.connect = </Root/placeHolder_X_Positive/Material_X/transfer_1/Multiply_2.outputs:out>
                float2 ui:nodegraph:node:pos = (1490.6232, 97.8088)
                float2 ui:nodegraph:node:size = (140, 145)
                int ui:nodegraph:node:stackingOrder = 3984
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepShift", "inputs:smoothStepStart"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }
        }
    }

    def Cube "placeHolder_X_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_X", "Material_X"]
        rel material:binding = </Root/placeHolder_X_Negative/Material_X> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_X"
        {
            reorder nameChildren = ["trim_1", "UnlitSurface_1", "transfer_1", "opacityCorrection_1", "Image_1", "Image", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual"]
            asset inputs:Image = @image.jpeg@ (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-136.96214, -138.12038)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 3745
                    }
                }
            )
            float inputs:opacityCorrection = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (873.5431, 134.26021)
                        float2 sizeInSubgraph = (180, 53)
                        int stackingOrderInSubgraph = 3876
                    }
                }
            )
            float inputs:smoothStepShift = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1408.7874, 51.70249)
                        float2 sizeInSubgraph = (173, 53)
                        int stackingOrderInSubgraph = 3878
                    }
                }
            )
            float inputs:smoothStepStart = 0.1 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1410.3711, 117.870056)
                        float2 sizeInSubgraph = (174, 53)
                        int stackingOrderInSubgraph = 3878
                    }
                }
            )
            float inputs:x = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (499.17526, 82.14949)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3876
                    }
                }
            )
            float inputs:XLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (502.78403, 150.1614)
                        float2 sizeInSubgraph = (112, 53)
                        int stackingOrderInSubgraph = 3876
                    }
                }
            )
            float inputs:y = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (160.45969, 135.20212)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3876
                    }
                }
            )
            float inputs:z = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (163.30215, 202.50557)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3876
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_X_Negative/Material_X/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2119.6396, 133.81857)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3517

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_X_Negative/Material_X/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0
                float inputs:opacity.connect = </Root/placeHolder_X_Negative/Material_X/transfer_1.outputs:return>
                float inputs:opacityThreshold
                token outputs:out
                float2 ui:nodegraph:node:pos = (1885.0413, 113.76458)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 3745
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:applyPostProcessToneMap", "inputs:applyPostProcessToneMap", "inputs:opacity"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Negative/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (91.14406, -29.383032)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3734
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_X_Negative/Material_X/Image.outputs:out>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_X_Negative/Material_X.inputs:y>
                float inputs:z (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (458.7852, 109.96706)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2808
                        }
                    }
                )
                float inputs:z.connect = </Root/placeHolder_X_Negative/Material_X.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (352.58267, 143.62653)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3876
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:z>
                    float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = None
                float inputs:in2 = 0
                float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.outputs:Min_out>
                float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X.inputs:x>
                float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X.inputs:XLayer>
                float outputs:out
                float2 ui:nodegraph:node:pos = (677.1841, 154.64444)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 3876
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value1", "inputs:value1"]
            }

            def "opacityCorrection_1" (
                active = true
                instanceable = true
                references = </Root/opacityCorrection>
            )
            {
                float inputs:opacityCorrection (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (461.80106, -156.40652)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 1106
                        }
                    }
                )
                float inputs:opacityCorrection.connect = </Root/placeHolder_X_Negative/Material_X.inputs:opacityCorrection>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (485.76352, -284.85245)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 1089
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_X_Negative/Material_X/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1096.53, 197.44504)
                float2 ui:nodegraph:node:size = (176, 127)
                int ui:nodegraph:node:stackingOrder = 3876
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:opacityCorrection"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145.5, 81)
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                prepend asset inputs:file.connect = </Root/placeHolder_X_Negative/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (881.3642, -257.7143)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3415
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (519.5298, 268.8333)
                            float2 sizeInSubgraph = (116.5, 53)
                            int stackingOrderInSubgraph = 3252
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_X_Negative/Material_X/opacityCorrection_1.outputs:return>
                float2 ui:nodegraph:node:pos = (1289.8903, 238.47173)
                float2 ui:nodegraph:node:size = (105, 109)
                int ui:nodegraph:node:stackingOrder = 3881
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (152, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepShift (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepShift.connect = </Root/placeHolder_X_Negative/Material_X.inputs:smoothStepShift>
                float inputs:smoothStepStart (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepStart.connect = </Root/placeHolder_X_Negative/Material_X.inputs:smoothStepStart>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_X_Negative/Material_X/trim_1.outputs:Min_out>
                float outputs:return.connect = </Root/placeHolder_X_Negative/Material_X/transfer_1/Multiply_2.outputs:out>
                float2 ui:nodegraph:node:pos = (1652.3568, 142.71198)
                float2 ui:nodegraph:node:size = (140, 145)
                int ui:nodegraph:node:stackingOrder = 3878
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepShift"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }
        }
    }

    def Cube "placeHolder_Y_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_Y", "Material_Y"]
        rel material:binding = </Root/placeHolder_Y_Positive/Material_Y> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, -0.059916124)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Y"
        {
            reorder nameChildren = ["trim_1", "transfer_1", "UnlitSurface_1", "opacityCorrection_1", "Image_1", "Image", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-146.14076, -116.99972)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 3630
                    }
                }
            )
            float inputs:opacityCorrection = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (864.2555, 80.6058)
                        float2 sizeInSubgraph = (180, 53)
                        int stackingOrderInSubgraph = 3762
                    }
                }
            )
            float inputs:smoothStepShift = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1472.2571, 82.46348)
                        float2 sizeInSubgraph = (173, 53)
                        int stackingOrderInSubgraph = 3708
                    }
                }
            )
            float inputs:smoothStepStart = 0.1 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1508.3922, 167.0264)
                        float2 sizeInSubgraph = (174, 53)
                        int stackingOrderInSubgraph = 3716
                    }
                }
            )
            float inputs:x = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (210.2802, 120.781815)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3703
                    }
                }
            )
            float inputs:y = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (569.32837, 166.37233)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3703
                    }
                }
            )
            float inputs:YLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (573.30054, 110.474625)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3703
                    }
                }
            )
            float inputs:z = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (210.87517, 185.1946)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3703
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Y_Positive/Material_Y/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2153.4355, 38.232193)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3486

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_Y_Positive/Material_Y/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0
                float inputs:opacity.connect = </Root/placeHolder_Y_Positive/Material_Y/transfer_1.outputs:return>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1931.0127, 144.67244)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 3714
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacityThreshold", "inputs:opacity"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (64.89013, 12.803858)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3627
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file", "inputs:uaddressmode"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 2835
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Y_Positive/Material_Y/Image.outputs:out>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (487.51428, 104.692825)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2837
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:x>
                float inputs:z (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (373.72916, 483.60965)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2835
                        }
                    }
                )
                float inputs:z.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (433.30692, 158.18195)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3703
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:x", "inputs:Ocopacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2831
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Dot.outputs:out>
                    float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Subtract_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }

                def Shader "Subtract_1"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:z>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (523.3973, 455.79712)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 2834
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:YLayer>
                float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:y>
                float outputs:out
                float2 ui:nodegraph:node:pos = (762.36694, 224.14798)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 3703
            }

            def "opacityCorrection_1" (
                active = true
                instanceable = true
                references = </Root/opacityCorrection>
            )
            {
                float inputs:opacityCorrection (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (461.80106, -156.40652)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 1106
                        }
                    }
                )
                float inputs:opacityCorrection.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:opacityCorrection>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (485.76352, -284.85245)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 1089
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Y_Positive/Material_Y/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1126.8359, 233.28563)
                float2 ui:nodegraph:node:size = (176, 127)
                int ui:nodegraph:node:stackingOrder = 3758
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:opacityCorrection"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145.5, 81)
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                prepend asset inputs:file.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (943.73016, -164.52205)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3711
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file", "inputs:uaddressmode"]
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (519.5298, 268.8333)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 3252
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Y_Positive/Material_Y/opacityCorrection_1.outputs:return>
                float2 ui:nodegraph:node:pos = (1301.1527, 253.22076)
                float2 ui:nodegraph:node:size = (105, 109)
                int ui:nodegraph:node:stackingOrder = 3760
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepShift (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepShift.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:smoothStepShift>
                float inputs:smoothStepStart (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepStart.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:smoothStepStart>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Y_Positive/Material_Y/trim_1.outputs:Min_out>
                float outputs:return.connect = </Root/placeHolder_Y_Positive/Material_Y/transfer_1/Multiply_2.outputs:out>
                float2 ui:nodegraph:node:pos = (1715.4419, 187.12842)
                float2 ui:nodegraph:node:size = (140, 145)
                int ui:nodegraph:node:stackingOrder = 3708
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepShift"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }
        }
    }

    def Cube "placeHolder_Y_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_Y_Negative/Material_Y> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, -0.0586534)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Y"
        {
            reorder nameChildren = ["transfer_1", "opacityCorrection_1", "Image_1", "trim_1", "UnlitSurface_1", "Image", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-156.7928, -56.245697)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 3548
                    }
                }
            )
            float inputs:opacityCorrection = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (671.7356, 157.87195)
                        float2 sizeInSubgraph = (180, 53)
                        int stackingOrderInSubgraph = 3590
                    }
                }
            )
            float inputs:smoothStepShift = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1143.2324, 103.44769)
                        float2 sizeInSubgraph = (173, 53)
                        int stackingOrderInSubgraph = 3544
                    }
                }
            )
            float inputs:smoothStepStart = 0.1 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1138.8528, 172.01009)
                        float2 sizeInSubgraph = (174, 53)
                        int stackingOrderInSubgraph = 3544
                    }
                }
            )
            float inputs:x = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (144.9284, 263.5777)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3587
                    }
                }
            )
            float inputs:y = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (472.9551, 242.4691)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3587
                    }
                }
            )
            float inputs:YLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (470.01248, 170.73332)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3587
                    }
                }
            )
            float inputs:z = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (145.52338, 327.99048)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3587
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Y_Negative/Material_Y/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1949.5385, 110.68668)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3051

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_Y_Negative/Material_Y/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0
                float inputs:opacity.connect = </Root/placeHolder_Y_Negative/Material_Y/transfer_1.outputs:return>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1672.9205, 176.6677)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 3467
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacityThreshold", "inputs:applyPostProcessToneMap", "inputs:opacity"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (20.835098, 94.89467)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3547
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file", "inputs:uaddressmode", "inputs:default"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (116.5, 53)
                            int stackingOrderInSubgraph = 2810
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Y_Negative/Material_Y/Image.outputs:out>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (458.7852, 109.96706)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:x>
                float inputs:z (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2813
                        }
                    }
                )
                float inputs:z.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (321.3162, 249.43745)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3587
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:x", "inputs:Ocopacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (115, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (180.5, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:z>
                    float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (113.5, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (113, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:YLayer>
                float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:y>
                float outputs:out
                float2 ui:nodegraph:node:pos = (651.3947, 253.47807)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 3587
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value2"]
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                prepend asset inputs:file.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (935.42413, -273.51395)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3461
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file", "inputs:uaddressmode"]
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (519.5298, 268.8333)
                            float2 sizeInSubgraph = (116.5, 53)
                            int stackingOrderInSubgraph = 3252
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Y_Negative/Material_Y/opacityCorrection_1.outputs:return>
                float2 ui:nodegraph:node:pos = (1158.2965, 284.0586)
                float2 ui:nodegraph:node:size = (105, 109)
                int ui:nodegraph:node:stackingOrder = 3537
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (152, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepShift (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepShift.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:smoothStepShift>
                float inputs:smoothStepStart (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepStart.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:smoothStepStart>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Y_Negative/Material_Y/trim_1.outputs:Min_out>
                float outputs:return.connect = </Root/placeHolder_Y_Negative/Material_Y/transfer_1/Multiply_2.outputs:out>
                float2 ui:nodegraph:node:pos = (1377.514, 169.54659)
                float2 ui:nodegraph:node:size = (140, 145)
                int ui:nodegraph:node:stackingOrder = 3544
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }

            def "opacityCorrection_1" (
                active = true
                instanceable = true
                references = </Root/opacityCorrection>
            )
            {
                float inputs:opacityCorrection (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (461.80106, -156.40652)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 1106
                        }
                    }
                )
                float inputs:opacityCorrection.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:opacityCorrection>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (485.76352, -284.85245)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 1089
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Y_Negative/Material_Y/IfGreaterOrEqual.outputs:out>
                float outputs:return.connect = </Root/placeHolder_Y_Negative/Material_Y/opacityCorrection_1/Subtract_1.outputs:out>
                float2 ui:nodegraph:node:pos = (899.64453, 251.3483)
                float2 ui:nodegraph:node:size = (176, 127)
                int ui:nodegraph:node:stackingOrder = 3590
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:opacityCorrection", "inputs:opacityCorrection", "inputs:opacityCorrection"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145.5, 81)
            }
        }
    }

    def Cube "placeHolder_Z_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_Z_Positive/Material_Z> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.43173033, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Z"
        {
            reorder nameChildren = ["trim_1", "UnlitSurface_1", "opacityCorrection_1", "Image_1", "Dot", "Dot_1", "transfer_1", "Image", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-206.71866, -56.35967)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 3725
                    }
                }
            )
            float inputs:opacityCorrection = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (891.20685, 48.24222)
                        float2 sizeInSubgraph = (180, 53)
                        int stackingOrderInSubgraph = 3778
                    }
                }
            )
            float inputs:smoothStepShift = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1341.9867, -82.34169)
                        float2 sizeInSubgraph = (173, 53)
                        int stackingOrderInSubgraph = 3719
                    }
                }
            )
            float inputs:smoothStepStart = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1354.4425, -19.762518)
                        float2 sizeInSubgraph = (174, 53)
                        int stackingOrderInSubgraph = 3719
                    }
                }
            )
            float inputs:x = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (143.81287, 235.76918)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3770
                    }
                }
            )
            float inputs:y = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (154.21802, 299.81448)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3770
                    }
                }
            )
            float inputs:z = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (500.78918, 175.40347)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3770
                    }
                }
            )
            float inputs:ZLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (507.5393, 108.319756)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3770
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Z_Positive/Material_Z/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2114.2993, 238.20566)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3377

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 0
                color3f inputs:color.connect = </Root/placeHolder_Z_Positive/Material_Z/Dot_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 1
                float inputs:opacity.connect = </Root/placeHolder_Z_Positive/Material_Z/transfer_1.outputs:return>
                float inputs:opacityThreshold
                token outputs:out
                float2 ui:nodegraph:node:pos = (1883.3693, 178.72592)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 3555
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacityThreshold", "inputs:opacity", "inputs:hasPremultipliedAlpha", "inputs:color", "inputs:color"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Z_Positive/Material_Z/Image.outputs:out>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (276.9795, 5.5900807)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2811
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:x>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:y>
                float outputs:Min_out.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (356.98157, 222.28746)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3770
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ocopacity", "inputs:y", "inputs:Ocopacity", "inputs:Ocopacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137.2568, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:ZLayer>
                float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:z>
                float outputs:out
                float2 ui:nodegraph:node:pos = (764.9963, 190.20581)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 3770
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepShift (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (162.59349, 89.00902)
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepShift.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:smoothStepShift>
                float inputs:smoothStepStart (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepStart.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:smoothStepStart>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Z_Positive/Material_Z/trim_1.outputs:Min_out>
                float2 ui:nodegraph:node:pos = (1588.6436, -9.549738)
                float2 ui:nodegraph:node:size = (140, 145)
                int ui:nodegraph:node:stackingOrder = 3780
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepShift", "inputs:smoothStepShift"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (17.920326, 37.773895)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3776
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode"]
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Positive/Material_Z/Dot.outputs:out>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (854.1362, -275.53766)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3475
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:uaddressmode"]
            }

            def Shader "Dot"
            {
                uniform token info:id = "ND_dot_filename"
                asset inputs:in.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:Image>
                asset outputs:out
                float2 ui:nodegraph:node:pos = (228.78418, -314.31775)
                float2 ui:nodegraph:node:size = (44, 18)
                int ui:nodegraph:node:stackingOrder = 3386
            }

            def Shader "Dot_1"
            {
                uniform token info:id = "ND_dot_color3"
                color3f inputs:in.connect = </Root/placeHolder_Z_Positive/Material_Z/Image_1.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1664.6353, -190.39912)
                float2 ui:nodegraph:node:size = (44, 18)
                int ui:nodegraph:node:stackingOrder = 3476
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (519.5298, 268.8333)
                            float2 sizeInSubgraph = (116.5, 53)
                            int stackingOrderInSubgraph = 3252
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Z_Positive/Material_Z/opacityCorrection_1.outputs:return>
                float2 ui:nodegraph:node:pos = (1344.5654, 157.81253)
                float2 ui:nodegraph:node:size = (105, 109)
                int ui:nodegraph:node:stackingOrder = 3724
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (152, 81)
            }

            def "opacityCorrection_1" (
                active = true
                instanceable = true
                references = </Root/opacityCorrection>
            )
            {
                float inputs:opacityCorrection (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (461.80106, -156.40652)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 1106
                        }
                    }
                )
                float inputs:opacityCorrection.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:opacityCorrection>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (485.76352, -284.85245)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 1089
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Z_Positive/Material_Z/IfGreaterOrEqual.outputs:out>
                float outputs:return.connect = </Root/placeHolder_Z_Positive/Material_Z/opacityCorrection_1/Subtract_1.outputs:out>
                float2 ui:nodegraph:node:pos = (1115.1625, 158.98422)
                float2 ui:nodegraph:node:size = (176, 127)
                int ui:nodegraph:node:stackingOrder = 3774
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:opacityCorrection"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145.5, 81)
            }
        }
    }

    def Cube "placeHolder_Z_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_Z", "trim_1"]
        rel material:binding = </Root/placeHolder_Z_Negative/Material_Z> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Z"
        {
            reorder nameChildren = ["trim_1", "transfer_1", "nodegraph", "opacityCorrection_1", "Image_1", "UnlitSurface_1", "Image", "UsdPreviewSurface", "IfGreaterOrEqual"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-97.54878, -42.41912)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 3517
                    }
                }
            )
            float inputs:opacityCorrection = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (904.3403, 174.30286)
                        float2 sizeInSubgraph = (180, 53)
                        int stackingOrderInSubgraph = 3510
                    }
                }
            )
            float inputs:smoothStepShift = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1467.0886, -43.6634)
                        float2 sizeInSubgraph = (173, 53)
                        int stackingOrderInSubgraph = 3516
                    }
                }
            )
            float inputs:smoothStepStart = 0.1 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1468.7972, 24.372437)
                        float2 sizeInSubgraph = (174, 53)
                        int stackingOrderInSubgraph = 3516
                    }
                }
            )
            float inputs:x = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (171.91515, 260.96088)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3510
                    }
                }
            )
            float inputs:y = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (174.97093, 326.8067)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3510
                    }
                }
            )
            float inputs:z = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (507.0215, 196.6534)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3510
                    }
                }
            )
            float inputs:ZLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (506.20572, 125.52596)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3510
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Z_Negative/Material_Z/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2321.8513, 131.92197)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3396

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 0
                color3f inputs:color.connect = </Root/placeHolder_Z_Negative/Material_Z/Dot_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0
                float inputs:opacity.connect = </Root/placeHolder_Z_Negative/Material_Z/transfer_1.outputs:return>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (2077.159, 90.74272)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 3474
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacityThreshold", "inputs:applyPostProcessToneMap"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:ZLayer>
                float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:z>
                float outputs:out
                float2 ui:nodegraph:node:pos = (701.15216, 181.31311)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 3510
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (601.78815, 282.2745)
                            float2 sizeInSubgraph = (116.5, 53)
                            int stackingOrderInSubgraph = 3088
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Z_Negative/Material_Z/Image.outputs:out>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (334.7672, 20.735537)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 3088
                        }
                    }
                )
                prepend float inputs:x.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:x>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (599.34375, 383.83594)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 3087
                        }
                    }
                )
                prepend float inputs:y.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:y>
                prepend float outputs:Min_out.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (347.55362, 211.31807)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3510
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_value1", "inputs:Ifgreater_in2", "inputs:Ocucapity", "inputs:Opacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1176, 178)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137.17842, 81)

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:x>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (513.8893, 79.2848)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 3086
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Separate2.outputs:outx>
                    float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Subtract.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (808.5, 123)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 3079
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1", "inputs:value2"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (983, 178)
                    float2 ui:nodegraph:node:size = (113, 40)
                    int ui:nodegraph:node:stackingOrder = 3078
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (808.5, 396)
                    float2 ui:nodegraph:node:size = (113.5, 163)
                    int ui:nodegraph:node:stackingOrder = 3077
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (316, 221.5)
                    float2 ui:nodegraph:node:size = (115, 127)
                    int ui:nodegraph:node:stackingOrder = 3074
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (91, 221.5)
                    float2 ui:nodegraph:node:size = (180.5, 53)
                    int ui:nodegraph:node:stackingOrder = 3073
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (570.5, 518)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 3076
                }
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (82.826355, 84.58367)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3366
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:file", "inputs:texcoord"]
            }

            def "opacityCorrection_1" (
                active = true
                instanceable = true
                references = </Root/opacityCorrection>
            )
            {
                float inputs:opacityCorrection (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (461.80106, -156.40652)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 1105
                        }
                    }
                )
                float inputs:opacityCorrection.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:opacityCorrection>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (485.76352, -284.85245)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 1089
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Z_Negative/Material_Z/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1115.5098, 189.28633)
                float2 ui:nodegraph:node:size = (176, 127)
                int ui:nodegraph:node:stackingOrder = 3519
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:opacityCorrection"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145.5, 81)
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Negative/Material_Z/Dot.outputs:out>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1011.19604, -254.37733)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3461
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:file", "inputs:texcoord"]
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (519.5298, 268.8333)
                            float2 sizeInSubgraph = (116.5, 53)
                            int stackingOrderInSubgraph = 3252
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Z_Negative/Material_Z/opacityCorrection_1.outputs:return>
                float2 ui:nodegraph:node:pos = (1306.2732, 185.96971)
                float2 ui:nodegraph:node:size = (105, 109)
                int ui:nodegraph:node:stackingOrder = 3510
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (152, 81)
            }

            def Shader "Dot"
            {
                uniform token info:id = "ND_dot_filename"
                asset inputs:in.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:Image>
                asset outputs:out
                float2 ui:nodegraph:node:pos = (44.744816, -284.39206)
                float2 ui:nodegraph:node:size = (44, 18)
                int ui:nodegraph:node:stackingOrder = 3463
            }

            def Shader "Dot_1"
            {
                uniform token info:id = "ND_dot_color3"
                color3f inputs:in.connect = </Root/placeHolder_Z_Negative/Material_Z/Image_1.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1859.8337, -168.35944)
                float2 ui:nodegraph:node:size = (44, 18)
                int ui:nodegraph:node:stackingOrder = 3466
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepShift (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (295.22253, 269.35736)
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepShift.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothStepShift>
                float inputs:smoothStepStart (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (174, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepStart.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothStepStart>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Z_Negative/Material_Z/trim_1.outputs:Min_out>
                float outputs:return.connect = </Root/placeHolder_Z_Negative/Material_Z/transfer_1/Multiply_2.outputs:out>
                float2 ui:nodegraph:node:pos = (1692.5476, 64.16387)
                float2 ui:nodegraph:node:size = (140, 145)
                int ui:nodegraph:node:stackingOrder = 3516
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (128.5, 81)
            }
        }
    }

    def NodeGraph "transfer"
    {
        float inputs:smoothStepShift = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (295.22253, 269.35736)
                    float2 sizeInSubgraph = (173, 53)
                    int stackingOrderInSubgraph = 948
                }
            }
        )
        float inputs:smoothStepStart = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (173.70726, 121.345276)
                    float2 sizeInSubgraph = (174, 53)
                    int stackingOrderInSubgraph = 950
                }
            }
        )
        float inputs:v = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (229.9507, -18.70273)
                    float2 sizeInSubgraph = (98, 53)
                    int stackingOrderInSubgraph = 928
                }
            }
        )
        float inputs:v.connect = </Root/placeHolder_Z_Negative/Material_Z/Image.outputs:out>
        float outputs:return (
            customData = {
                dictionary realitykit = {
                    int stackingOrderInSubgraph = 885
                }
            }
        )
        float outputs:return.connect = </Root/transfer/Multiply_2.outputs:out>
        float2 ui:nodegraph:node:pos = (497.71362, -5.39278)
        float2 ui:nodegraph:node:size = (145, 145)
        int ui:nodegraph:node:stackingOrder = 3034
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1586.1802, 23.692131)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (128.92651, 81)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 950

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1 = 2
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/transfer/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (809, 26)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 941
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:in2"]
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/transfer.inputs:v>
            float inputs:in2.connect = </Root/transfer.inputs:smoothStepStart>
            float outputs:out
            float2 ui:nodegraph:node:pos = (409.98773, 41.660812)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 928
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/transfer/Divide.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (673.5, 116.5)
            float2 ui:nodegraph:node:size = (91, 145)
            int ui:nodegraph:node:stackingOrder = 947
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in", "inputs:in"]
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/transfer/Clamp.outputs:out>
            float inputs:in2.connect = </Root/transfer/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (929.75, 114)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 940
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/transfer/Subtract.outputs:out>
            float inputs:in2.connect = </Root/transfer.inputs:smoothStepShift>
            float outputs:out
            float2 ui:nodegraph:node:pos = (537.25, 116.5)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 946
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1 = 3
            float inputs:in2.connect = </Root/transfer/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (929.75, 18)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 943
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/transfer/Subtract_1.outputs:out>
            float inputs:in2.connect = </Root/transfer/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1050.5, 38)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 944
        }
    }

    def NodeGraph "opacityCorrection"
    {
        float inputs:opacityCorrection = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (461.80106, -156.40652)
                    float2 sizeInSubgraph = (180, 53)
                    int stackingOrderInSubgraph = 1106
                }
            }
        )
        float inputs:v = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (485.76352, -284.85245)
                    float2 sizeInSubgraph = (98, 53)
                    int stackingOrderInSubgraph = 1114
                }
            }
        )
        float inputs:v.connect = </Root/placeHolder_Z_Negative/Material_Z/Image.outputs:out>
        float outputs:return (
            customData = {
                dictionary realitykit = {
                    int stackingOrderInSubgraph = 885
                }
            }
        )
        float outputs:return.connect = </Root/opacityCorrection/Subtract_1.outputs:out>
        float2 ui:nodegraph:node:pos = (517.7136, 14.60722)
        float2 ui:nodegraph:node:size = (145, 145)
        int ui:nodegraph:node:stackingOrder = 3035
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1126.5563, -278.73495)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (136, 81)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1081

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 100
            float inputs:in2.connect = </Root/opacityCorrection.inputs:opacityCorrection>
            float outputs:out
            float2 ui:nodegraph:node:pos = (669.73804, -161.50824)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 1113
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2", "outputs:out", "outputs:out", "outputs:out", "outputs:out"]
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/opacityCorrection/Subtract.outputs:out>
            float inputs:in2.connect = </Root/opacityCorrection/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (812.45404, -224.0462)
            float2 ui:nodegraph:node:size = (123.5, 40)
            int ui:nodegraph:node:stackingOrder = 1109
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1 = 1
            float inputs:in2.connect = </Root/opacityCorrection.inputs:v>
            float outputs:out
            float2 ui:nodegraph:node:pos = (629.31116, -292.79443)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 1115
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1 = 1
            float inputs:in2.connect = </Root/opacityCorrection/Power.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (946.2585, -280.47968)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 1080
        }
    }

    def NodeGraph "trim"
    {
        float inputs:Opacity (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (519.5298, 268.8333)
                    float2 sizeInSubgraph = (116.5, 53)
                    int stackingOrderInSubgraph = 3252
                }
            }
        )
        float outputs:Min_out.connect = </Root/trim/Min_1.outputs:out>
        float2 ui:nodegraph:node:pos = (886.10284, 263.64175)
        float2 ui:nodegraph:node:size = (119.5, 145)
        int ui:nodegraph:node:stackingOrder = 3347
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ocopacity", "inputs:y", "inputs:Ocopacity", "inputs:Ocopacity", "outputs:Min_out"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1096.7119, 184.61337)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3254

        def Shader "Texcoord"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (111, 243)
            float2 ui:nodegraph:node:size = (180.5, 53)
            int ui:nodegraph:node:stackingOrder = 3252
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Min_1"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/trim/Ifgreater.outputs:out>
            float inputs:in2.connect = </Root/trim/Ifgreater_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (911.5781, 197.6211)
            float2 ui:nodegraph:node:size = (118, 53)
            int ui:nodegraph:node:stackingOrder = 3252
        }

        def Shader "Ifgreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:in2.connect = </Root/trim.inputs:Opacity>
            float inputs:value1.connect = </Root/trim/Max.outputs:out>
            float inputs:value2 = 0.99
            float outputs:out
            float2 ui:nodegraph:node:pos = (716.5, 101.5)
            float2 ui:nodegraph:node:size = (109, 163)
            int ui:nodegraph:node:stackingOrder = 3252
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2", "inputs:in1", "inputs:in1", "inputs:in2", "inputs:in1", "outputs:out", "inputs:in1", "inputs:value1", "inputs:value1", "inputs:in1", "inputs:value1", "outputs:out", "inputs:in1"]
        }

        def Shader "Ifgreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:in2.connect = </Root/trim.inputs:Opacity>
            float inputs:value1 = 0.01
            float inputs:value1.connect = None
            float inputs:value2.connect = </Root/trim/Min.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (716.5, 324.5)
            float2 ui:nodegraph:node:size = (113.5, 163)
            int ui:nodegraph:node:stackingOrder = 3252
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1", "inputs:value1", "inputs:value1", "inputs:value1"]
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1.connect = </Root/trim/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/trim/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (518.5, 179.5)
            float2 ui:nodegraph:node:size = (113, 40)
            int ui:nodegraph:node:stackingOrder = 3252
        }

        def Shader "Min"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/trim/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/trim/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (518.5, 401)
            float2 ui:nodegraph:node:size = (113, 40)
            int ui:nodegraph:node:stackingOrder = 3252
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/trim/Texcoord.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (320, 243)
            float2 ui:nodegraph:node:size = (115, 127)
            int ui:nodegraph:node:stackingOrder = 3252
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
        }
    }
}

