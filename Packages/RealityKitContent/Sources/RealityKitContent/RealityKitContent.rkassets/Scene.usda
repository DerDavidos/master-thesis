#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["placeHolder_X_Positive", "placeHolder_X_Negative", "placeHolder_Y_Positive", "placeHolder_Y_Negative", "placeHolder_Z_Positive", "placeHolder_Z_Negative", "trim", "transfer", "transfer_1"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Cube "placeHolder_X_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_X_Positive/Material_X> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_X"
        {
            reorder nameChildren = ["trim_1", "transfer_1", "UnlitSurface_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual", "Subtract"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-316.0134, -121.14087)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 1018
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (257.252, -28.70647)
                        float2 sizeInSubgraph = (144, 53)
                        int stackingOrderInSubgraph = 1019
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (294.42007, 15.430508)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 2659
                    }
                }
            )
            float inputs:x = 0.4 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (817.7703, 237.68591)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3040
                    }
                }
            )
            float inputs:XLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (955.4111, 339.2913)
                        float2 sizeInSubgraph = (112, 53)
                        int stackingOrderInSubgraph = 3037
                    }
                }
            )
            float inputs:y = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (755.68396, 145.97955)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2538
                    }
                }
            )
            float inputs:z = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (755.089, 81.566765)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2634
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_X_Positive/Material_X/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2128.4067, 33.992218)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3047

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_X_Positive/Material_X/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_X_Positive/Material_X/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1823.2659, 4.692282)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 3045
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:color"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Positive/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (7.818141, -0.5798941)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 638
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Positive/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (11.070714, -212.15535)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 640
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:vaddressmode"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Ocopacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (132, 53)
                            int stackingOrderInSubgraph = 2812
                        }
                    }
                )
                float inputs:Ocopacity.connect = </Root/placeHolder_X_Positive/Material_X/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (331.59103, 98.80573)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2816
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_X_Positive/Material_X.inputs:z>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_X_Positive/Material_X.inputs:y>
                float outputs:Min_out.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (995.18787, 32.004803)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3035
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Separate2.outputs:outx>
                    float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Subtract.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:x>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (483.59375, 123.83984)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 2814
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = None
                float inputs:in2 = 0
                float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.outputs:Min_out>
                float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X.inputs:x>
                float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X.inputs:XLayer>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1208.4539, 187.79706)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 2638
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_X_Positive/Material_X.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_X_Positive/Material_X.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_X_Positive/Material_X/Image.outputs:out>
                float2 ui:nodegraph:node:size = (145, 145)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Ifgreater_in2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Ifgreater_in2.connect = </Root/placeHolder_X_Positive/Material_X/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:size = (113, 109)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145, 81)
            }
        }
    }

    def Cube "placeHolder_X_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_X", "Material_X"]
        rel material:binding = </Root/placeHolder_X_Negative/Material_X> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_X"
        {
            reorder nameChildren = ["trim_1", "UnlitSurface_1", "transfer_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual", "Subtract", "Subtract_1"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-316.0134, -121.14087)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 2680
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (257.252, -28.70647)
                        float2 sizeInSubgraph = (144, 53)
                        int stackingOrderInSubgraph = 2680
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (294.42007, 15.430508)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 2659
                    }
                }
            )
            float inputs:x = 0.4 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (828.08844, 289.26483)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2637
                    }
                }
            )
            float inputs:XLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (804.8424, 221.52487)
                        float2 sizeInSubgraph = (112, 53)
                        int stackingOrderInSubgraph = 2640
                    }
                }
            )
            float inputs:y = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (755.68396, 145.97955)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2538
                    }
                }
            )
            float inputs:z = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (693.24524, 49.930046)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2645
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_X_Negative/Material_X/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1858.4963, -59.036777)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2707

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_X_Negative/Material_X/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_X_Negative/Material_X/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold
                token outputs:out
                float2 ui:nodegraph:node:pos = (1635.8068, -76.38424)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 3035
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:applyPostProcessToneMap"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Negative/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (7.818141, -0.5798941)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 638
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Negative/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (11.070714, -212.15535)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 640
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:vaddressmode"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Ocopacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (132, 53)
                            int stackingOrderInSubgraph = 2812
                        }
                    }
                )
                float inputs:Ocopacity.connect = </Root/placeHolder_X_Negative/Material_X/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (458.7852, 109.96706)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_X_Negative/Material_X.inputs:z>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_X_Negative/Material_X.inputs:y>
                float outputs:Min_out.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (995.18787, 32.004803)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3036
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = None
                float inputs:in2 = 0
                float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.outputs:Min_out>
                float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X.inputs:x>
                float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X.inputs:XLayer>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1208.4539, 187.79706)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 2910
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_X_Negative/Material_X.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_X_Negative/Material_X.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_X_Negative/Material_X/Image.outputs:out>
                float2 ui:nodegraph:node:size = (145, 145)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Ifgreater_in2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Ifgreater_in2.connect = </Root/placeHolder_X_Negative/Material_X/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:size = (113, 109)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            }
        }
    }

    def Cube "placeHolder_Y_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_Y", "Material_Y"]
        rel material:binding = </Root/placeHolder_Y_Positive/Material_Y> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Y"
        {
            reorder nameChildren = ["trim_1", "transfer_1", "UnlitSurface_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-316.0134, -121.14087)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 1018
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (257.252, -28.70647)
                        float2 sizeInSubgraph = (144, 53)
                        int stackingOrderInSubgraph = 1019
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (294.42007, 15.430508)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 2659
                    }
                }
            )
            float inputs:x = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (755.089, 81.566765)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2625
                    }
                }
            )
            float inputs:y = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (828.08844, 289.26483)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2630
                    }
                }
            )
            float inputs:YLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (834.8385, 222.18112)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 2631
                    }
                }
            )
            float inputs:z = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (755.68396, 145.97955)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2630
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Y_Positive/Material_Y/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2395.4304, -16.216852)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2880

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_Y_Positive/Material_Y/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_Y_Positive/Material_Y/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (2172.6418, -52.94933)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 2880
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacity", "inputs:opacityThreshold"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (7.818141, -0.5798941)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 638
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (11.070714, -212.15535)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 640
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:vaddressmode"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Ocopacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (132, 53)
                            int stackingOrderInSubgraph = 2812
                        }
                    }
                )
                float inputs:Ocopacity.connect = </Root/placeHolder_Y_Positive/Material_Y/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (227.84221, 69.77831)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:x>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (373.72916, 483.60965)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2844
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (995.18787, 32.004803)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3046
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:x", "inputs:Ocopacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137.95824, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2831
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Dot.outputs:out>
                    float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Subtract_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:x>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (386.9702, 104.255905)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 2841
                }

                def Shader "Subtract_1"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:y>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (523.3973, 455.79712)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 2834
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:YLayer>
                float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:y>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1208.4539, 187.79706)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 2626
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Ifgreater_in2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Ifgreater_in2.connect = </Root/placeHolder_Y_Positive/Material_Y/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:size = (113, 109)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Y_Positive/Material_Y/Image.outputs:out>
                float2 ui:nodegraph:node:size = (145, 145)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }
        }
    }

    def Cube "placeHolder_Y_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_Y_Negative/Material_Y> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Y"
        {
            reorder nameChildren = ["trim_1", "transfer_1", "UnlitSurface_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual", "Subtract"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-316.0134, -121.14087)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 1018
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (278.79977, -73.13188)
                        float2 sizeInSubgraph = (144, 53)
                        int stackingOrderInSubgraph = 3036
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (274.42007, -4.5694923)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 2658
                    }
                }
            )
            float inputs:x = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (755.089, 81.566765)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2625
                    }
                }
            )
            float inputs:y = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (901.8294, 273.1199)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3045
                    }
                }
            )
            float inputs:YLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (863.09357, 192.42299)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3042
                    }
                }
            )
            float inputs:z = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (755.68396, 145.97955)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2630
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Y_Negative/Material_Y/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2226.9915, -14.529488)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2880

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_Y_Negative/Material_Y/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_Y_Negative/Material_Y/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (2004.203, -51.261963)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 2912
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacityThreshold", "inputs:applyPostProcessToneMap"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (7.818141, -0.5798941)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 638
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (11.070714, -212.15535)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 640
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:vaddressmode"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Ocopacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (132, 53)
                            int stackingOrderInSubgraph = 2812
                        }
                    }
                )
                float inputs:Ocopacity.connect = </Root/placeHolder_Y_Negative/Material_Y/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (458.7852, 109.96706)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:x>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (995.18787, 32.004803)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3039
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:x"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137.42729, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:YLayer>
                float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:y>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1236.8976, 144.44861)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 3036
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Ifgreater_in2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Ifgreater_in2.connect = </Root/placeHolder_Y_Negative/Material_Y/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:size = (113, 109)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Y_Negative/Material_Y/Image.outputs:out>
                float2 ui:nodegraph:node:size = (145, 145)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }
        }
    }

    def Cube "placeHolder_Z_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_Z_Positive/Material_Z> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.12097311, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Z"
        {
            reorder nameChildren = ["UnlitSurface_1", "transfer_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual", "Subtract", "trim_1"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-316.0134, -121.14087)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 1018
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (257.252, -28.70647)
                        float2 sizeInSubgraph = (144, 53)
                        int stackingOrderInSubgraph = 1019
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (294.42007, 15.430508)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 2659
                    }
                }
            )
            float inputs:x = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (760.3982, 80.85941)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3040
                    }
                }
            )
            float inputs:y = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (755.68396, 145.97955)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2538
                    }
                }
            )
            float inputs:z = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (828.08844, 289.26483)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 2629
                    }
                }
            )
            float inputs:ZLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (834.8385, 222.18112)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 2625
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Z_Positive/Material_Z/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2129.964, -1.6029273)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2904

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 0
                color3f inputs:color.connect = </Root/placeHolder_Z_Positive/Material_Z/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_Z_Positive/Material_Z/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1907.1757, -38.335403)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 2944
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (7.818141, -0.5798941)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 638
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (11.070714, -212.15535)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 640
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:vaddressmode"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Ocopacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (132, 53)
                            int stackingOrderInSubgraph = 2812
                        }
                    }
                )
                float inputs:Ocopacity.connect = </Root/placeHolder_Z_Positive/Material_Z/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (276.9795, 5.5900807)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2811
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:x>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:y>
                float outputs:Min_out.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (995.18787, 32.004803)
                float2 ui:nodegraph:node:size = (120, 145)
                int ui:nodegraph:node:stackingOrder = 3042
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ocopacity", "inputs:y"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137.15443, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:Ocopacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:ZLayer>
                float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:z>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1208.4539, 187.79706)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 2626
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Ifgreater_in2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Ifgreater_in2.connect = </Root/placeHolder_Z_Positive/Material_Z/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:size = (113, 109)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Z_Positive/Material_Z/Image.outputs:out>
                float2 ui:nodegraph:node:size = (145, 145)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }
        }
    }

    def Cube "placeHolder_Z_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_Z", "trim_1"]
        rel material:binding = </Root/placeHolder_Z_Negative/Material_Z> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Z"
        {
            reorder nameChildren = ["transfer_1", "UnlitSurface_1", "Image", "Image_1", "UsdPreviewSurface", "IfGreaterOrEqual", "Subtract", "Separate2", "Min", "Dot", "Texcoord", "Ifgreater_1", "Ifgreater", "trim_1"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-316.0134, -121.14087)
                        float2 sizeInSubgraph = (116, 53)
                        int stackingOrderInSubgraph = 1018
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (257.252, -28.70647)
                        float2 sizeInSubgraph = (144, 53)
                        int stackingOrderInSubgraph = 1019
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (294.42007, 15.430508)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 2659
                    }
                }
            )
            float inputs:x = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (430.31992, 263.83188)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3078
                    }
                }
            )
            float inputs:y = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (466.27582, 162.80336)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3080
                    }
                }
            )
            float inputs:z = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (997.4608, 153.58208)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3070
                    }
                }
            )
            float inputs:ZLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1018.311, 80.76729)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3069
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Z_Negative/Material_Z/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2457.9714, 23.80561)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2783

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 0
                color3f inputs:color.connect = </Root/placeHolder_Z_Negative/Material_Z/Image_1.outputs:out>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_Z_Negative/Material_Z/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (2139.5146, 70.00481)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 2874
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (7.818141, -0.5798941)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3033
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:file"]
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1164.1422, -183.21289)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 3029
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:vaddressmode"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:ZLayer>
                float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:z>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1318.156, 165.58913)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 3071
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Ifgreater_in2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Ifgreater_in2.connect = </Root/placeHolder_Z_Negative/Material_Z/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:size = (113, 109)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Z_Negative/Material_Z/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (506.78796, 35.24706)
                float2 ui:nodegraph:node:size = (145, 145)
                int ui:nodegraph:node:stackingOrder = 3036
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (129, 81)
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Ifgreater_1_value1 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (570.5, 422.5)
                            float2 sizeInSubgraph = (181, 53)
                        }
                    }
                )
                prepend float inputs:Ifgreater_1_value1.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:y>
                float inputs:Ifgreater_in2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (602.6163, 325.84872)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3081
                        }
                    }
                )
                prepend float inputs:Ifgreater_in2.connect = </Root/placeHolder_Z_Negative/Material_Z/transfer_1.outputs:return>
                float inputs:Subtract_in2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (334.7672, 20.735537)
                            float2 sizeInSubgraph = (149, 53)
                            int stackingOrderInSubgraph = 3083
                        }
                    }
                )
                prepend float inputs:Subtract_in2.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:x>
                prepend float outputs:Min_out.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (759.3375, 183.63931)
                float2 ui:nodegraph:node:size = (137, 145)
                int ui:nodegraph:node:stackingOrder = 3076
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_value1"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1176, 178)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137.52782, 81)

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:Subtract_in2>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (513.8893, 79.2848)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 3086
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:Ifgreater_in2>
                    float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Separate2.outputs:outx>
                    float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Subtract.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (808.5, 123)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 3079
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1", "inputs:value2"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (983, 178)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 3078
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:Ifgreater_in2>
                    float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:Ifgreater_1_value1>
                    float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (808.5, 396)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 3077
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (316, 221.5)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 3074
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (91, 221.5)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 3073
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (570.5, 518)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 3076
                }
            }
        }
    }

    def NodeGraph "trim"
    {
        float inputs:Ifgreater_in2 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (412.1392, 52.571606)
                    float2 sizeInSubgraph = (148, 53)
                    int stackingOrderInSubgraph = 3108
                }
            }
        )
        float inputs:Ifgreater_in2.connect = </Root/placeHolder_Z_Negative/Material_Z/IfGreaterOrEqual.outputs:out>
        float outputs:Min_1_out.connect = </Root/trim/Min_1.outputs:out>
        float2 ui:nodegraph:node:pos = (1518.3389, 233.92802)
        float2 ui:nodegraph:node:size = (113, 109)
        int ui:nodegraph:node:stackingOrder = 2908
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ifgreater_in2"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1073, 111.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145, 81)

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/trim/Texcoord.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (300, 223)
            float2 ui:nodegraph:node:size = (116, 127)
            int ui:nodegraph:node:stackingOrder = 3106
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
        }

        def Shader "Texcoord"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (91, 223)
            float2 ui:nodegraph:node:size = (182, 53)
            int ui:nodegraph:node:stackingOrder = 3106
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Ifgreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:in2.connect = </Root/trim.inputs:Ifgreater_in2>
            float inputs:value1.connect = </Root/trim/Max.outputs:out>
            float inputs:value2 = 0.98
            float outputs:out
            float2 ui:nodegraph:node:pos = (696.5, 81.5)
            float2 ui:nodegraph:node:size = (109, 163)
            int ui:nodegraph:node:stackingOrder = 3111
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2", "inputs:in1", "inputs:in1", "inputs:in2", "inputs:in1", "outputs:out", "inputs:in1", "inputs:value1", "inputs:value1", "inputs:in1", "inputs:value1", "outputs:out", "inputs:in1"]
        }

        def Shader "Min"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/trim/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/trim/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (498.5, 381)
            float2 ui:nodegraph:node:size = (114, 40)
            int ui:nodegraph:node:stackingOrder = 3106
        }

        def Shader "Min_1"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/trim/Ifgreater.outputs:out>
            float inputs:in2.connect = </Root/trim/Ifgreater_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (873.5, 111.5)
            float2 ui:nodegraph:node:size = (119, 53)
            int ui:nodegraph:node:stackingOrder = 3106
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1.connect = </Root/trim/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/trim/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (498.5, 159.5)
            float2 ui:nodegraph:node:size = (114, 40)
            int ui:nodegraph:node:stackingOrder = 3106
        }

        def Shader "Ifgreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:in2.connect = </Root/trim.inputs:Ifgreater_in2>
            float inputs:value1 = 0.02
            float inputs:value1.connect = None
            float inputs:value2.connect = </Root/trim/Min.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (696.5, 304.5)
            float2 ui:nodegraph:node:size = (115, 163)
            int ui:nodegraph:node:stackingOrder = 3112
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1", "inputs:value1", "inputs:value1", "inputs:value1"]
        }
    }

    def NodeGraph "transfer"
    {
        float inputs:smoothStepStep = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 sizeInSubgraph = (173, 53)
                    int stackingOrderInSubgraph = 889
                }
            }
        )
        float inputs:smoothStepStep.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothStep>
        float inputs:smoothStepWidth = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (212.77861, 222.0645)
                    float2 sizeInSubgraph = (180, 53)
                    int stackingOrderInSubgraph = 891
                }
            }
        )
        float inputs:smoothStepWidth.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothWidth>
        float inputs:v = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (169.79424, 26.00644)
                    float2 sizeInSubgraph = (98, 53)
                    int stackingOrderInSubgraph = 889
                }
            }
        )
        float inputs:v.connect = </Root/placeHolder_Z_Negative/Material_Z/Image.outputs:out>
        float outputs:return (
            customData = {
                dictionary realitykit = {
                    int stackingOrderInSubgraph = 885
                }
            }
        )
        float outputs:return.connect = </Root/transfer/Multiply_2.outputs:out>
        float2 ui:nodegraph:node:pos = (497.71362, -5.39278)
        float2 ui:nodegraph:node:size = (145, 145)
        int ui:nodegraph:node:stackingOrder = 3034
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1186.434, 51.35862)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (129, 81)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 889

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1 = 2
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/transfer/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (809, 26)
            float2 ui:nodegraph:node:size = (61, 36)
            int ui:nodegraph:node:stackingOrder = 887
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:in2"]
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/transfer.inputs:v>
            float inputs:in2.connect = </Root/transfer.inputs:smoothStepStep>
            float outputs:out
            float2 ui:nodegraph:node:pos = (348.25, 86.5)
            float2 ui:nodegraph:node:size = (63, 36)
            int ui:nodegraph:node:stackingOrder = 884
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/transfer/Divide.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (673.5, 116.5)
            float2 ui:nodegraph:node:size = (92, 145)
            int ui:nodegraph:node:stackingOrder = 884
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in", "inputs:in"]
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/transfer/Clamp.outputs:out>
            float inputs:in2.connect = </Root/transfer/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (929.75, 114)
            float2 ui:nodegraph:node:size = (61, 36)
            int ui:nodegraph:node:stackingOrder = 884
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/transfer/Subtract.outputs:out>
            float inputs:in2.connect = </Root/transfer.inputs:smoothStepWidth>
            float outputs:out
            float2 ui:nodegraph:node:pos = (537.25, 116.5)
            float2 ui:nodegraph:node:size = (63, 36)
            int ui:nodegraph:node:stackingOrder = 884
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1 = 3
            float inputs:in2.connect = </Root/transfer/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (929.75, 18)
            float2 ui:nodegraph:node:size = (63, 36)
            int ui:nodegraph:node:stackingOrder = 884
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/transfer/Subtract_1.outputs:out>
            float inputs:in2.connect = </Root/transfer/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1050.5, 38)
            float2 ui:nodegraph:node:size = (61, 36)
            int ui:nodegraph:node:stackingOrder = 884
        }
    }
}

