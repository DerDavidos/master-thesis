#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["placeHolder_X_Positive", "placeHolder_X_Negative", "placeHolder_Y_Positive", "placeHolder_Y_Negative", "placeHolder_Z_Positive", "placeHolder_Z_Negative", "trim", "transfer", "transfer_1"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Cube "placeHolder_X_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_X_Positive/Material_X> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_X"
        {
            reorder nameChildren = ["trim_1", "transfer_1", "UnlitSurface_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual", "Subtract"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-38.578545, -143.42683)
                        float2 sizeInSubgraph = (115.5, 53)
                        int stackingOrderInSubgraph = 3092
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (296.42004, -53.883835)
                        float2 sizeInSubgraph = (143.5, 53)
                        int stackingOrderInSubgraph = 3076
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (294.42007, 15.430508)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 2659
                    }
                }
            )
            float inputs:x = 0.4 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1094.7797, 71.98399)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3142
                    }
                }
            )
            float inputs:XLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1093.4465, 143.74261)
                        float2 sizeInSubgraph = (111.5, 53)
                        int stackingOrderInSubgraph = 3142
                    }
                }
            )
            float inputs:y = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (738.4988, 141.70657)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3142
                    }
                }
            )
            float inputs:z = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (740.62616, 205.355)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3142
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_X_Positive/Material_X/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1999.3954, 18.299356)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3081

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_X_Positive/Material_X/trim_1.outputs:color>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_X_Positive/Material_X/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1751.4062, 199.18909)
                float2 ui:nodegraph:node:size = (194.5, 181)
                int ui:nodegraph:node:stackingOrder = 3154
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:color"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Positive/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (136.17082, -7.1263585)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 3148
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file", "inputs:default"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 2816
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_X_Positive/Material_X/transfer_1.outputs:return>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_X_Positive/Material_X.inputs:y>
                float inputs:z (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (331.23166, 95.70417)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2818
                        }
                    }
                )
                float inputs:z.connect = </Root/placeHolder_X_Positive/Material_X.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (958.6256, 130.86632)
                float2 ui:nodegraph:node:size = (119.5, 145)
                int ui:nodegraph:node:stackingOrder = 3142
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "outputs:Min_out"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2822

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Separate2.outputs:outx>
                    float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Subtract.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.inputs:z>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (483.59375, 123.83984)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 2815
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = None
                float inputs:in2 = 0
                float inputs:in2.connect = </Root/placeHolder_X_Positive/Material_X/nodegraph.outputs:Min_out>
                float inputs:value1.connect = </Root/placeHolder_X_Positive/Material_X.inputs:x>
                float inputs:value2.connect = </Root/placeHolder_X_Positive/Material_X.inputs:XLayer>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1300.9321, 173.75975)
                float2 ui:nodegraph:node:size = (156, 163)
                int ui:nodegraph:node:stackingOrder = 3142
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_X_Positive/Material_X.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_X_Positive/Material_X.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_X_Positive/Material_X/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (493.7496, 30.92465)
                float2 ui:nodegraph:node:size = (145, 145)
                int ui:nodegraph:node:stackingOrder = 3060
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_X_Positive/Material_X/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1503.4855, 211.66537)
                float2 ui:nodegraph:node:size = (103.5, 127)
                int ui:nodegraph:node:stackingOrder = 3142
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (145, 81)
            }

            def Shader "UsdUVTexture"
            {
                uniform token info:id = "ND_UsdUVTexture"
                asset inputs:file.connect = </Root/placeHolder_X_Positive/Material_X.inputs:Image>
                float outputs:a
                float outputs:b
                float outputs:g
                float outputs:r
                float2 ui:nodegraph:node:pos = (184.21233, 148.82579)
                float2 ui:nodegraph:node:size = (141.5, 217)
                int ui:nodegraph:node:stackingOrder = 3152
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:rgba", "outputs:rgba"]
            }
        }
    }

    def Cube "placeHolder_X_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_X", "Material_X"]
        rel material:binding = </Root/placeHolder_X_Negative/Material_X> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_X"
        {
            reorder nameChildren = ["trim_1", "UnlitSurface_1", "transfer_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual", "Subtract", "Subtract_1"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-29.80729, -157.46797)
                        float2 sizeInSubgraph = (115.5, 53)
                        int stackingOrderInSubgraph = 3121
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (351.33185, -102.64713)
                        float2 sizeInSubgraph = (143.5, 53)
                        int stackingOrderInSubgraph = 3127
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (352.9156, -36.479572)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 3124
                    }
                }
            )
            float inputs:x = 0.4 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1015.5819, 20.885345)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3100
                    }
                }
            )
            float inputs:XLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1019.1907, 88.897255)
                        float2 sizeInSubgraph = (111.5, 53)
                        int stackingOrderInSubgraph = 3104
                    }
                }
            )
            float inputs:y = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (676.86633, 73.937965)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3139
                    }
                }
            )
            float inputs:z = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (679.7088, 141.24141)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3141
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_X_Negative/Material_X/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1851.269, 74.54599)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3042

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_X_Negative/Material_X/trim_1.outputs:color>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_X_Negative/Material_X/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold
                token outputs:out
                float2 ui:nodegraph:node:pos = (1611.675, 201.69135)
                float2 ui:nodegraph:node:size = (194.5, 181)
                int ui:nodegraph:node:stackingOrder = 3136
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:applyPostProcessToneMap"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_X_Negative/Material_X.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (182.86057, -24.900063)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 3131
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_X_Negative/Material_X/transfer_1.outputs:return>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_X_Negative/Material_X.inputs:y>
                float inputs:z (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (458.7852, 109.96706)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2808
                        }
                    }
                )
                float inputs:z.connect = </Root/placeHolder_X_Negative/Material_X.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (856.8018, 84.66532)
                float2 ui:nodegraph:node:size = (119.5, 145)
                int ui:nodegraph:node:stackingOrder = 3134
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:z>
                    float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = None
                float inputs:in2 = 0
                float inputs:in2.connect = </Root/placeHolder_X_Negative/Material_X/nodegraph.outputs:Min_out>
                float inputs:value1.connect = </Root/placeHolder_X_Negative/Material_X.inputs:x>
                float inputs:value2.connect = </Root/placeHolder_X_Negative/Material_X.inputs:XLayer>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1193.5907, 93.38029)
                float2 ui:nodegraph:node:size = (156, 163)
                int ui:nodegraph:node:stackingOrder = 3091
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value1"]
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_X_Negative/Material_X.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_X_Negative/Material_X.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_X_Negative/Material_X/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (579.17395, -54.469593)
                float2 ui:nodegraph:node:size = (145, 145)
                int ui:nodegraph:node:stackingOrder = 3111
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_X_Negative/Material_X/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1396.847, 191.36476)
                float2 ui:nodegraph:node:size = (103.5, 127)
                int ui:nodegraph:node:stackingOrder = 3038
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            }
        }
    }

    def Cube "placeHolder_Y_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_Y", "Material_Y"]
        rel material:binding = </Root/placeHolder_Y_Positive/Material_Y> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Y"
        {
            reorder nameChildren = ["trim_1", "transfer_1", "UnlitSurface_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-90.482834, -136.88226)
                        float2 sizeInSubgraph = (115.5, 53)
                        int stackingOrderInSubgraph = 3245
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (291.11404, -76.27513)
                        float2 sizeInSubgraph = (143.5, 53)
                        int stackingOrderInSubgraph = 3087
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (284.6468, -6.4792743)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 3085
                    }
                }
            )
            float inputs:x = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (746.45325, 112.20041)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3295
                    }
                }
            )
            float inputs:y = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1131.5168, 91.52404)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3188
                    }
                }
            )
            float inputs:YLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1138.267, 24.440332)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3188
                    }
                }
            )
            float inputs:z = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (747.0482, 176.61319)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3295
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Y_Positive/Material_Y/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1979.5211, 96.544426)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3072

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_Y_Positive/Material_Y/trim_1.outputs:color>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_Y_Positive/Material_Y/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1761.2174, 246.76898)
                float2 ui:nodegraph:node:size = (194.5, 181)
                int ui:nodegraph:node:stackingOrder = 3254
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacity", "inputs:opacityThreshold"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (110.573814, -8.430566)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 3242
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file", "inputs:uaddressmode"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 2835
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Y_Positive/Material_Y/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (487.51428, 104.692825)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2837
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:x>
                float inputs:z (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (373.72916, 483.60965)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2835
                        }
                    }
                )
                float inputs:z.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (992.01685, 84.924576)
                float2 ui:nodegraph:node:size = (119.5, 145)
                int ui:nodegraph:node:stackingOrder = 3252
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:x", "inputs:Ocopacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2831
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Dot.outputs:out>
                    float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Subtract_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }

                def Shader "Subtract_1"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.inputs:z>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (523.3973, 455.79712)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 2834
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Y_Positive/Material_Y/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:YLayer>
                float inputs:value2.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:y>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1357.5446, 221.40274)
                float2 ui:nodegraph:node:size = (156, 163)
                int ui:nodegraph:node:stackingOrder = 3197
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Y_Positive/Material_Y/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1544.8629, 226.54198)
                float2 ui:nodegraph:node:size = (103.5, 127)
                int ui:nodegraph:node:stackingOrder = 3199
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_Y_Positive/Material_Y.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Y_Positive/Material_Y/Image.outputs:out>
                float2 ui:nodegraph:node:size = (145, 145)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }
        }
    }

    def Cube "placeHolder_Y_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_Y_Negative/Material_Y> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Y"
        {
            reorder nameChildren = ["trim_1", "transfer_1", "UnlitSurface_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual", "Subtract"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-26.7084, -111.15963)
                        float2 sizeInSubgraph = (115.5, 53)
                        int stackingOrderInSubgraph = 3090
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (343.15094, -29.051903)
                        float2 sizeInSubgraph = (143.5, 53)
                        int stackingOrderInSubgraph = 3079
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (338.77124, 39.510487)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 3079
                    }
                }
            )
            float inputs:x = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (716.54114, 150.89572)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3070
                    }
                }
            )
            float inputs:y = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1044.5679, 129.78711)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3060
                    }
                }
            )
            float inputs:YLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1041.6252, 58.051346)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3063
                    }
                }
            )
            float inputs:z = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (717.1361, 215.3085)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3070
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Y_Negative/Material_Y/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1949.5385, 110.68668)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3051

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 1
                color3f inputs:color.connect = </Root/placeHolder_Y_Negative/Material_Y/trim_1.outputs:color>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_Y_Negative/Material_Y/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1672.9205, 176.6677)
                float2 ui:nodegraph:node:size = (194.5, 181)
                int ui:nodegraph:node:stackingOrder = 3097
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacityThreshold", "inputs:applyPostProcessToneMap"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (143.39565, 27.772339)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 3081
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (116.5, 53)
                            int stackingOrderInSubgraph = 2810
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Y_Negative/Material_Y/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (458.7852, 109.96706)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:x>
                float inputs:z (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2813
                        }
                    }
                )
                float inputs:z.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:z>
                float outputs:Min_out.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (892.92896, 136.75548)
                float2 ui:nodegraph:node:size = (119.5, 145)
                int ui:nodegraph:node:stackingOrder = 3095
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:x", "inputs:Ocopacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (115, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (180.5, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.inputs:z>
                    float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (113.5, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (113, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Y_Negative/Material_Y/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:YLayer>
                float inputs:value2.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:y>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1236.8976, 144.44861)
                float2 ui:nodegraph:node:size = (156, 163)
                int ui:nodegraph:node:stackingOrder = 3040
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value2"]
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Y_Negative/Material_Y/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1452.3475, 184.97313)
                float2 ui:nodegraph:node:size = (103.5, 127)
                int ui:nodegraph:node:stackingOrder = 3047
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ifgreater_in2", "inputs:Ifgreater_in2"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_Y_Negative/Material_Y.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Y_Negative/Material_Y/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (577.4325, 37.04699)
                float2 ui:nodegraph:node:size = (145, 145)
                int ui:nodegraph:node:stackingOrder = 3075
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }
        }
    }

    def Cube "placeHolder_Z_Positive" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/placeHolder_Z_Positive/Material_Z> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.3483795, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Z"
        {
            reorder nameChildren = ["UnlitSurface_1", "transfer_1", "Image", "Image_1", "UsdPreviewSurface", "nodegraph", "IfGreaterOrEqual", "Subtract", "trim_1"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-54.83754, 46.35005)
                        float2 sizeInSubgraph = (115.5, 53)
                        int stackingOrderInSubgraph = 3186
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (323.76904, -14.554915)
                        float2 sizeInSubgraph = (143.5, 53)
                        int stackingOrderInSubgraph = 3124
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (336.22476, 48.024258)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 3127
                    }
                }
            )
            float inputs:x = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (645.0969, 194.06879)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3103
                    }
                }
            )
            float inputs:y = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (655.5021, 258.11407)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3141
                    }
                }
            )
            float inputs:z = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1012.86096, 168.30446)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3094
                    }
                }
            )
            float inputs:ZLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1019.611, 101.22075)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3094
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Z_Positive/Material_Z/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1945.2279, 250.95102)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3199

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 0
                color3f inputs:color.connect = </Root/placeHolder_Z_Positive/Material_Z/trim_1.outputs:color>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_Z_Positive/Material_Z/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1664.9716, 279.3595)
                float2 ui:nodegraph:node:size = (194.5, 181)
                int ui:nodegraph:node:stackingOrder = 3197
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold", "inputs:opacityThreshold", "inputs:opacity"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (501.00006, 280.88766)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Z_Positive/Material_Z/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (276.9795, 5.5900807)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2811
                        }
                    }
                )
                float inputs:x.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:x>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (444.4671, 375.54602)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 2809
                        }
                    }
                )
                float inputs:y.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:y>
                float outputs:Min_out.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (831.1039, 184.1971)
                float2 ui:nodegraph:node:size = (119.5, 145)
                int ui:nodegraph:node:stackingOrder = 3145
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ocopacity", "inputs:y", "inputs:Ocopacity", "inputs:Ocopacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1036.9363, 278.91962)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137.15443, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2787

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (214.44858, 248.63914)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 2688
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:x>
                    float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Separate2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (687.6565, 124.37821)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 2675
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-8.836226, 255.0784)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 2708
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (680.8892, 425.97546)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 2805
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (862.89154, 301.87238)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 2787
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (352.34045, 424.14096)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 2807
                }
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Z_Positive/Material_Z/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:ZLayer>
                float inputs:value2.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:z>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1208.4539, 187.79706)
                float2 ui:nodegraph:node:size = (156, 163)
                int ui:nodegraph:node:stackingOrder = 2626
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Z_Positive/Material_Z/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1378.7417, 233.9986)
                float2 ui:nodegraph:node:size = (103.5, 127)
                int ui:nodegraph:node:stackingOrder = 3195
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Z_Positive/Material_Z/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (587.47687, 52.8076)
                float2 ui:nodegraph:node:size = (145, 145)
                int ui:nodegraph:node:stackingOrder = 3107
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144, 81)
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Positive/Material_Z.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (145.24324, 67.873)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 3201
            }
        }
    }

    def Cube "placeHolder_Z_Negative" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Material_Z", "trim_1"]
        rel material:binding = </Root/placeHolder_Z_Negative/Material_Z> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material_Z"
        {
            reorder nameChildren = ["transfer_1", "UnlitSurface_1", "Image", "Image_1", "UsdPreviewSurface", "IfGreaterOrEqual", "Subtract", "Separate2", "Min", "Dot", "Texcoord", "Ifgreater_1", "Ifgreater", "trim_1"]
            asset inputs:Image (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-97.54878, -42.41912)
                        float2 sizeInSubgraph = (115.5, 53)
                        int stackingOrderInSubgraph = 3120
                    }
                }
            )
            float inputs:smoothStep = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (319.5621, 53.252808)
                        float2 sizeInSubgraph = (143.5, 53)
                        int stackingOrderInSubgraph = 3117
                    }
                }
            )
            float inputs:smoothWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (321.2707, 121.28864)
                        float2 sizeInSubgraph = (151, 53)
                        int stackingOrderInSubgraph = 3112
                    }
                }
            )
            float inputs:x = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (731.3564, 225.96138)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3130
                    }
                }
            )
            float inputs:y = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (734.4122, 291.80722)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3132
                    }
                }
            )
            float inputs:z = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1066.4628, 161.65392)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 3090
                    }
                }
            )
            float inputs:ZLayer = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1065.647, 90.52648)
                        float2 sizeInSubgraph = (111, 53)
                        int stackingOrderInSubgraph = 3093
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/placeHolder_Z_Negative/Material_Z/UnlitSurface_1.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/placeHolder_Z_Positive/Material/GeometryModifier.outputs:out>
            token outputs:surface.connect = </Root/placeHolder_Z_Positive/Material/UsdPreviewSurface.outputs:surface>
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1997.2001, 172.54205)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3082

            def Shader "UnlitSurface_1" (
                active = true
            )
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 0
                color3f inputs:color.connect = </Root/placeHolder_Z_Negative/Material_Z/trim_1.outputs:color>
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.5
                float inputs:opacity.connect = </Root/placeHolder_Z_Negative/Material_Z/trim_1.outputs:Min_1_out>
                float inputs:opacityThreshold.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1758.8578, 157.74724)
                float2 ui:nodegraph:node:size = (194.5, 181)
                int ui:nodegraph:node:stackingOrder = 3140
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity", "inputs:opacityThreshold"]
            }

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:in1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.outputs:Min_out>
                float inputs:in2 = 0
                float inputs:in2.connect = None
                float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:ZLayer>
                float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:z>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1318.156, 165.58913)
                float2 ui:nodegraph:node:size = (156, 163)
                int ui:nodegraph:node:stackingOrder = 3071
            }

            def "trim_1" (
                active = true
                instanceable = true
                references = </Root/trim>
            )
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (412.1392, 52.571606)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 3108
                        }
                    }
                )
                float inputs:Opacity.connect = </Root/placeHolder_Z_Negative/Material_Z/IfGreaterOrEqual.outputs:out>
                float2 ui:nodegraph:node:pos = (1528.8862, 208.90852)
                float2 ui:nodegraph:node:size = (103.5, 127)
                int ui:nodegraph:node:stackingOrder = 3136
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ifgreater_in2", "outputs:color"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            }

            def "transfer_1" (
                active = true
                instanceable = true
                references = </Root/transfer>
            )
            {
                float inputs:smoothStepStep (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (173, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:smoothStepStep.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothStep>
                float inputs:smoothStepWidth (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (212.77861, 222.0645)
                            float2 sizeInSubgraph = (180, 53)
                            int stackingOrderInSubgraph = 891
                        }
                    }
                )
                float inputs:smoothStepWidth.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothWidth>
                float inputs:v (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (169.79424, 26.00644)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 889
                        }
                    }
                )
                float inputs:v.connect = </Root/placeHolder_Z_Negative/Material_Z/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (525.021, 141.08008)
                float2 ui:nodegraph:node:size = (145, 145)
                int ui:nodegraph:node:stackingOrder = 3099
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (129, 81)
            }

            def NodeGraph "nodegraph"
            {
                float inputs:Opacity (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (601.78815, 282.2745)
                            float2 sizeInSubgraph = (117, 53)
                            int stackingOrderInSubgraph = 3088
                        }
                    }
                )
                prepend float inputs:Opacity.connect = </Root/placeHolder_Z_Negative/Material_Z/transfer_1.outputs:return>
                float inputs:x (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (334.7672, 20.735537)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 3088
                        }
                    }
                )
                prepend float inputs:x.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:x>
                float inputs:y (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (599.34375, 383.83594)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 3087
                        }
                    }
                )
                prepend float inputs:y.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:y>
                prepend float outputs:Min_out.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Min.outputs:out>
                float2 ui:nodegraph:node:pos = (906.9949, 176.31859)
                float2 ui:nodegraph:node:size = (119.5, 145)
                int ui:nodegraph:node:stackingOrder = 3132
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_value1", "inputs:Ifgreater_in2", "inputs:Ocucapity", "inputs:Opacity"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1176, 178)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (137, 81)

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1 = 1
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:x>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (513.8893, 79.2848)
                    float2 ui:nodegraph:node:size = (63, 36)
                    int ui:nodegraph:node:stackingOrder = 3086
                }

                def Shader "Ifgreater"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Separate2.outputs:outx>
                    float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Subtract.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (808.5, 123)
                    float2 ui:nodegraph:node:size = (109, 163)
                    int ui:nodegraph:node:stackingOrder = 3079
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1", "inputs:value2"]
                }

                def Shader "Min"
                {
                    uniform token info:id = "ND_min_float"
                    float inputs:in1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Ifgreater.outputs:out>
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Ifgreater_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (983, 178)
                    float2 ui:nodegraph:node:size = (114, 40)
                    int ui:nodegraph:node:stackingOrder = 3078
                }

                def Shader "Ifgreater_1"
                {
                    uniform token info:id = "ND_ifgreater_float"
                    float inputs:in1
                    float inputs:in2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:Opacity>
                    float inputs:value1.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph.inputs:y>
                    float inputs:value2.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Dot.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (808.5, 396)
                    float2 ui:nodegraph:node:size = (115, 163)
                    int ui:nodegraph:node:stackingOrder = 3077
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value2", "inputs:value1", "inputs:in1"]
                }

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (316, 221.5)
                    float2 ui:nodegraph:node:size = (116, 127)
                    int ui:nodegraph:node:stackingOrder = 3074
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (91, 221.5)
                    float2 ui:nodegraph:node:size = (182, 53)
                    int ui:nodegraph:node:stackingOrder = 3073
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/placeHolder_Z_Negative/Material_Z/nodegraph/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (570.5, 518)
                    float2 ui:nodegraph:node:size = (44, 18)
                    int ui:nodegraph:node:stackingOrder = 3076
                }
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:Image>
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (82.826355, 84.58367)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 3135
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:file", "inputs:texcoord"]
            }
        }
    }

    def NodeGraph "trim"
    {
        float inputs:Opacity (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (499.52982, 248.83333)
                    float2 sizeInSubgraph = (116.5, 53)
                    int stackingOrderInSubgraph = 3114
                }
            }
        )
        float inputs:Opacity.connect = </Root/placeHolder_Z_Negative/Material_Z/IfGreaterOrEqual.outputs:out>
        color3f outputs:color (
            customData = {
                dictionary realitykit = {
                    int stackingOrderInSubgraph = 3127
                }
            }
        )
        color3f outputs:color.connect = </Root/trim/Combine3.outputs:out>
        float outputs:Min_1_out.connect = </Root/trim/Min_1.outputs:out>
        float2 ui:nodegraph:node:pos = (1518.3389, 233.92802)
        float2 ui:nodegraph:node:size = (113, 109)
        int ui:nodegraph:node:stackingOrder = 2908
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Ifgreater_1_in2", "inputs:Ifgreater_in2"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1275.7461, 186.70312)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (144.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3131

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/trim/Texcoord.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (300, 223)
            float2 ui:nodegraph:node:size = (115, 127)
            int ui:nodegraph:node:stackingOrder = 3106
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
        }

        def Shader "Texcoord"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (91, 223)
            float2 ui:nodegraph:node:size = (180.5, 53)
            int ui:nodegraph:node:stackingOrder = 3106
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Ifgreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:in2.connect = </Root/trim.inputs:Opacity>
            float inputs:value1.connect = </Root/trim/Max.outputs:out>
            float inputs:value2 = 0.99
            float outputs:out
            float2 ui:nodegraph:node:pos = (696.5, 81.5)
            float2 ui:nodegraph:node:size = (109, 163)
            int ui:nodegraph:node:stackingOrder = 3118
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2", "inputs:in1", "inputs:in1", "inputs:in2", "inputs:in1", "outputs:out", "inputs:in1", "inputs:value1", "inputs:value1", "inputs:in1", "inputs:value1", "outputs:out", "inputs:in1"]
        }

        def Shader "Min"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/trim/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/trim/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (498.5, 381)
            float2 ui:nodegraph:node:size = (113, 40)
            int ui:nodegraph:node:stackingOrder = 3106
        }

        def Shader "Min_1"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/trim/Ifgreater.outputs:out>
            float inputs:in2.connect = </Root/trim/Ifgreater_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (891.5781, 177.6211)
            float2 ui:nodegraph:node:size = (118, 53)
            int ui:nodegraph:node:stackingOrder = 3115
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1.connect = </Root/trim/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/trim/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (498.5, 159.5)
            float2 ui:nodegraph:node:size = (113, 40)
            int ui:nodegraph:node:stackingOrder = 3106
        }

        def Shader "Ifgreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:in2.connect = </Root/trim.inputs:Opacity>
            float inputs:value1 = 0.01
            float inputs:value1.connect = None
            float inputs:value2.connect = </Root/trim/Min.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (696.5, 304.5)
            float2 ui:nodegraph:node:size = (113.5, 163)
            int ui:nodegraph:node:stackingOrder = 3117
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1", "inputs:value1", "inputs:value1", "inputs:value1"]
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_color3"
            float inputs:in1.connect = </Root/trim/Min_1.outputs:out>
            float inputs:in2.connect = </Root/trim/Min_1.outputs:out>
            float inputs:in3.connect = </Root/trim/Min_1.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (1055.0234, 99.27344)
            float2 ui:nodegraph:node:size = (145, 54)
            int ui:nodegraph:node:stackingOrder = 3129
        }
    }

    def NodeGraph "transfer"
    {
        float inputs:smoothStepStep = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (68.12109, 86.62109)
                    float2 sizeInSubgraph = (172.5, 53)
                    int stackingOrderInSubgraph = 891
                }
            }
        )
        float inputs:smoothStepStep.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothStep>
        float inputs:smoothStepWidth = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (212.77861, 222.0645)
                    float2 sizeInSubgraph = (179.5, 53)
                    int stackingOrderInSubgraph = 891
                }
            }
        )
        float inputs:smoothStepWidth.connect = </Root/placeHolder_Z_Negative/Material_Z.inputs:smoothWidth>
        float inputs:v = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (237.01299, 13.295502)
                    float2 sizeInSubgraph = (98, 53)
                    int stackingOrderInSubgraph = 889
                }
            }
        )
        float inputs:v.connect = </Root/placeHolder_Z_Negative/Material_Z/Image.outputs:out>
        float outputs:return (
            customData = {
                dictionary realitykit = {
                    int stackingOrderInSubgraph = 885
                }
            }
        )
        float outputs:return.connect = </Root/transfer/Multiply_2.outputs:out>
        float2 ui:nodegraph:node:pos = (497.71362, -5.39278)
        float2 ui:nodegraph:node:size = (145, 145)
        int ui:nodegraph:node:stackingOrder = 3034
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepStep", "inputs:smoothStepWidth", "inputs:smoothStepStep"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1186.434, 51.35862)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (128.5, 81)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 889

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1 = 2
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/transfer/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (809, 26)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 887
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:in2"]
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/transfer.inputs:v>
            float inputs:in2.connect = </Root/transfer.inputs:smoothStepStep>
            float outputs:out
            float2 ui:nodegraph:node:pos = (348.25, 86.5)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 884
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/transfer/Divide.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (673.5, 116.5)
            float2 ui:nodegraph:node:size = (91, 145)
            int ui:nodegraph:node:stackingOrder = 884
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in", "inputs:in"]
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/transfer/Clamp.outputs:out>
            float inputs:in2.connect = </Root/transfer/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (929.75, 114)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 884
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/transfer/Subtract.outputs:out>
            float inputs:in2.connect = </Root/transfer.inputs:smoothStepWidth>
            float outputs:out
            float2 ui:nodegraph:node:pos = (537.25, 116.5)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 884
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1 = 3
            float inputs:in2.connect = </Root/transfer/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (929.75, 18)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 884
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/transfer/Subtract_1.outputs:out>
            float inputs:in2.connect = </Root/transfer/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1050.5, 38)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 884
        }
    }
}

