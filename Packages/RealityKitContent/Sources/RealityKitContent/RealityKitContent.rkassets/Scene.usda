#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["placeHolder", "Material_2", "Material_1", "Material"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Cube "placeHolder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 2.220446e-16)
        float3 xformOp:translate = (0.014746728, 0, 0.045809012)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Material "Material_1"
    {
        asset inputs:test = @image.jpeg@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-472.36328, -16.257812)
                    float2 sizeInSubgraph = (116, 53)
                    int stackingOrderInSubgraph = 469
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/Material_1/UnlitSurface_1.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/Material/GeometryModifier.outputs:out>
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (342.2774, 64.26647)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 542

        def Shader "UnlitSurface_1"
        {
            uniform token info:id = "ND_realitykit_unlit_surfaceshader"
            bool inputs:applyPostProcessToneMap = 1
            color3f inputs:color.connect = </Root/Material_1/UsdUVTexture.outputs:rgb>
            bool inputs:hasPremultipliedAlpha = 1
            float inputs:opacity = 0.5
            float inputs:opacity.connect = </Root/Material_1/Image.outputs:out>
            float inputs:opacityThreshold.connect = None
            token outputs:out
            float2 ui:nodegraph:node:pos = (96.40784, 60.028873)
            float2 ui:nodegraph:node:size = (195, 181)
            int ui:nodegraph:node:stackingOrder = 540
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold"]
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_float"
            float inputs:default
            asset inputs:file.connect = </Root/Material_1.inputs:test>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-153.68695, 175.57709)
            float2 ui:nodegraph:node:size = (149, 199)
            int ui:nodegraph:node:stackingOrder = 538
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
        }

        def Shader "UsdUVTexture"
        {
            uniform token info:id = "ND_UsdUVTexture"
            asset inputs:file.connect = </Root/Material_1.inputs:test>
            float outputs:a
            float outputs:b
            float outputs:g
            float outputs:r
            color3f outputs:rgb
            color4f outputs:rgba
            float2 ui:nodegraph:node:pos = (-156.84375, -69.91406)
            float2 ui:nodegraph:node:size = (142, 217)
            int ui:nodegraph:node:stackingOrder = 541
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:fallback", "outputs:rgba", "outputs:rgba", "outputs:rgba", "outputs:rgba", "outputs:rgba", "outputs:rgba", "outputs:rgba", "outputs:rgba", "outputs:rgba"]
        }
    }

    def Material "Material_2"
    {
        asset inputs:test = @image.jpeg@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-472.36328, -16.257812)
                    float2 sizeInSubgraph = (116, 53)
                    int stackingOrderInSubgraph = 469
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/Material_2/UnlitSurface_1.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/Material/GeometryModifier.outputs:out>
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (440.5274, 15.848503)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 486

        def Shader "UnlitSurface_1"
        {
            uniform token info:id = "ND_realitykit_unlit_surfaceshader"
            bool inputs:applyPostProcessToneMap = 0
            color3f inputs:color.connect = </Root/Material_2/Image_1.outputs:out>
            bool inputs:hasPremultipliedAlpha = 0
            float inputs:opacity = 0.5
            float inputs:opacity.connect = </Root/Material_2/Ifgreater.outputs:out>
            float inputs:opacityThreshold.connect = None
            token outputs:out
            float2 ui:nodegraph:node:pos = (225.72815, -8.002377)
            float2 ui:nodegraph:node:size = (195, 181)
            int ui:nodegraph:node:stackingOrder = 489
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold"]
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_float"
            float inputs:default
            asset inputs:file.connect = </Root/Material_2.inputs:test>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-177.58148, 176.42474)
            float2 ui:nodegraph:node:size = (149, 199)
            int ui:nodegraph:node:stackingOrder = 474
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
        }

        def Shader "Ifgreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1
            float inputs:in2 = 1
            float inputs:in2.connect = None
            float inputs:value1 = 0.1
            float inputs:value1.connect = None
            float inputs:value2 = 0.3
            float inputs:value2.connect = </Root/Material_2/Image.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (35.323433, 112.88037)
            float2 ui:nodegraph:node:size = (109, 163)
            int ui:nodegraph:node:stackingOrder = 488
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:value1", "inputs:value1", "inputs:value1", "inputs:in1", "inputs:in2", "inputs:value1", "inputs:in2", "inputs:value1", "inputs:value1", "inputs:in1"]
        }

        def Shader "Image_1"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default
            asset inputs:file.connect = </Root/Material_2.inputs:test>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-186.40208, -38.04711)
            float2 ui:nodegraph:node:size = (149, 199)
            int ui:nodegraph:node:stackingOrder = 493
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord"]
        }
    }

    def Material "Material"
    {
        reorder nameChildren = ["UnlitSurface_1", "Image", "Image_1", "transfer", "Time", "Modulo", "Divide", "ViewDirection", "Separate3", "inBetween"]
        asset inputs:test = @image.jpeg@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-207.10326, -111.50011)
                    float2 sizeInSubgraph = (116, 53)
                    int stackingOrderInSubgraph = 642
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/Material/UnlitSurface_1.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/Material/GeometryModifier.outputs:out>
        token outputs:surface.connect = </Root/Material/UsdPreviewSurface.outputs:surface>
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1336.8235, -77.92916)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 954

        def Shader "UnlitSurface_1" (
            active = true
        )
        {
            uniform token info:id = "ND_realitykit_unlit_surfaceshader"
            bool inputs:applyPostProcessToneMap = 0
            color3f inputs:color.connect = </Root/Material/Image_1.outputs:out>
            bool inputs:hasPremultipliedAlpha = 0
            float inputs:opacity = 0.5
            float inputs:opacity.connect = </Root/Material/transfer.outputs:return>
            float inputs:opacityThreshold.connect = None
            token outputs:out
            float2 ui:nodegraph:node:pos = (1085.2537, -81.29728)
            float2 ui:nodegraph:node:size = (195, 181)
            int ui:nodegraph:node:stackingOrder = 961
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:color", "inputs:opacity", "inputs:applyPostProcessToneMap", "inputs:opacityThreshold", "inputs:opacityThreshold", "outputs:out", "inputs:applyPostProcessToneMap", "inputs:hasPremultipliedAlpha", "inputs:opacityThreshold", "inputs:hasPremultipliedAlpha", "inputs:opacity"]
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_float"
            float inputs:default
            asset inputs:file.connect = </Root/Material.inputs:test>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (7.818141, -0.5798941)
            float2 ui:nodegraph:node:size = (149, 199)
            int ui:nodegraph:node:stackingOrder = 638
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uaddressmode", "inputs:texcoord", "inputs:texcoord", "inputs:default", "inputs:texcoord", "inputs:file"]
        }

        def NodeGraph "transfer"
        {
            float inputs:smoothStepStep = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 sizeInSubgraph = (173, 53)
                        int stackingOrderInSubgraph = 889
                    }
                }
            )
            float inputs:smoothStepStep.connect = None
            float inputs:smoothStepWidth = 0.1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (212.77861, 222.0645)
                        float2 sizeInSubgraph = (180, 53)
                        int stackingOrderInSubgraph = 891
                    }
                }
            )
            float inputs:v = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (169.79424, 26.00644)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 889
                    }
                }
            )
            float inputs:v.connect = </Root/Material/Image.outputs:out>
            float outputs:return (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 885
                    }
                }
            )
            float outputs:return.connect = </Root/Material/transfer/Multiply_2.outputs:out>
            float2 ui:nodegraph:node:pos = (365.07117, 13.864315)
            float2 ui:nodegraph:node:size = (145, 145)
            int ui:nodegraph:node:stackingOrder = 1010
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:smoothStepWidth", "inputs:smoothStepWidth", "inputs:smoothStepStep", "inputs:smoothStepStep"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1186.434, 51.35862)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (129, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 889

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1 = 2
                float inputs:in1.connect = None
                float inputs:in2.connect = </Root/Material/transfer/Clamp.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (809, 26)
                float2 ui:nodegraph:node:size = (61, 36)
                int ui:nodegraph:node:stackingOrder = 887
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "inputs:in2"]
            }

            def Shader "Subtract"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </Root/Material/transfer.inputs:v>
                float inputs:in2.connect = </Root/Material/transfer.inputs:smoothStepStep>
                float outputs:out
                float2 ui:nodegraph:node:pos = (348.25, 86.5)
                float2 ui:nodegraph:node:size = (63, 36)
                int ui:nodegraph:node:stackingOrder = 884
            }

            def Shader "Clamp"
            {
                uniform token info:id = "ND_clamp_float"
                float inputs:high
                float inputs:in.connect = </Root/Material/transfer/Divide.outputs:out>
                float inputs:low
                float outputs:out
                float2 ui:nodegraph:node:pos = (673.5, 116.5)
                float2 ui:nodegraph:node:size = (92, 145)
                int ui:nodegraph:node:stackingOrder = 884
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in", "inputs:in"]
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Material/transfer/Clamp.outputs:out>
                float inputs:in2.connect = </Root/Material/transfer/Clamp.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (929.75, 114)
                float2 ui:nodegraph:node:size = (61, 36)
                int ui:nodegraph:node:stackingOrder = 884
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }

            def Shader "Divide"
            {
                uniform token info:id = "ND_divide_float"
                float inputs:in1.connect = </Root/Material/transfer/Subtract.outputs:out>
                float inputs:in2.connect = </Root/Material/transfer.inputs:smoothStepWidth>
                float outputs:out
                float2 ui:nodegraph:node:pos = (537.25, 116.5)
                float2 ui:nodegraph:node:size = (63, 36)
                int ui:nodegraph:node:stackingOrder = 884
            }

            def Shader "Subtract_1"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1 = 3
                float inputs:in2.connect = </Root/Material/transfer/Multiply_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (929.75, 18)
                float2 ui:nodegraph:node:size = (63, 36)
                int ui:nodegraph:node:stackingOrder = 884
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Material/transfer/Subtract_1.outputs:out>
                float inputs:in2.connect = </Root/Material/transfer/Multiply.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1050.5, 38)
                float2 ui:nodegraph:node:size = (61, 36)
                int ui:nodegraph:node:stackingOrder = 884
            }
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-5.58259, 165.61745)
            float2 ui:nodegraph:node:size = (123, 53)
            int ui:nodegraph:node:stackingOrder = 833
        }

        def Shader "Modulo"
        {
            uniform token info:id = "ND_modulo_float"
            float inputs:in1.connect = </Root/Material/Divide.outputs:out>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (177.37262, 161.5974)
            float2 ui:nodegraph:node:size = (64, 39)
            int ui:nodegraph:node:stackingOrder = 695
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1", "outputs:out"]
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/Material/Time.outputs:out>
            float inputs:in2 = 5
            float outputs:out
            float2 ui:nodegraph:node:pos = (97.7212, 167.1834)
            float2 ui:nodegraph:node:size = (63, 36)
            int ui:nodegraph:node:stackingOrder = 695
        }

        def Shader "Image_1"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default
            prepend asset inputs:file.connect = </Root/Material.inputs:test>
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (11.070714, -212.15535)
            float2 ui:nodegraph:node:size = (149, 199)
            int ui:nodegraph:node:stackingOrder = 640
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:texcoord", "inputs:vaddressmode"]
        }

        def Shader "UsdPreviewSurface" (
            active = false
        )
        {
            uniform token info:id = "UsdPreviewSurface"
            token outputs:surface
        }

        def NodeGraph "inBetween"
        {
            float inputs:falseResult = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-3.34375, 136.8711)
                        float2 sizeInSubgraph = (137, 53)
                        int stackingOrderInSubgraph = 993
                    }
                }
            )
            float inputs:higherBound = 0.9 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (317.27344, 89.21484)
                        float2 sizeInSubgraph = (148, 53)
                        int stackingOrderInSubgraph = 982
                    }
                }
            )
            float inputs:lowerBound = 0.6 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-16.15625, -160.22266)
                        float2 sizeInSubgraph = (142, 53)
                        int stackingOrderInSubgraph = 979
                    }
                }
            )
            float inputs:trueResult = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-3.9648438, 48.460938)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 990
                    }
                }
            )
            float inputs:trueResult.connect = None
            float inputs:value = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (114.42578, -48.953125)
                        float2 sizeInSubgraph = (101, 53)
                        int stackingOrderInSubgraph = 984
                    }
                }
            )
            float outputs:result (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 958
                    }
                }
            )
            float outputs:result.connect = </Root/Material/inBetween/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (884.74786, 174.4768)
            float2 ui:nodegraph:node:size = (117, 181)
            int ui:nodegraph:node:stackingOrder = 1005
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:falseResult", "inputs:trueResult", "inputs:higherBound", "inputs:higherBound", "inputs:falseResult", "inputs:lowerBound", "inputs:higherBound", "inputs:trueResult", "inputs:lowerBound", "inputs:falseResult"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (808.99744, -25.46616)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (127, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 973

            def Shader "Ifgreater"
            {
                uniform token info:id = "ND_ifgreater_float"
                float inputs:in1.connect = </Root/Material/inBetween/Ifgreater_1.outputs:out>
                float inputs:in2.connect = </Root/Material/inBetween.inputs:falseResult>
                float inputs:value1 = -1
                float inputs:value1.connect = </Root/Material/inBetween.inputs:higherBound>
                float inputs:value2 = 0.5
                float inputs:value2.connect = </Root/Material/inBetween.inputs:value>
                float outputs:out
                float2 ui:nodegraph:node:pos = (590.2344, 76.57422)
                float2 ui:nodegraph:node:size = (109, 163)
                int ui:nodegraph:node:stackingOrder = 976
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1", "inputs:value2", "inputs:value2", "inputs:value1", "inputs:in1", "inputs:value2", "inputs:value1", "inputs:value1"]
            }

            def Shader "Ifgreater_1"
            {
                uniform token info:id = "ND_ifgreater_float"
                float inputs:in1.connect = </Root/Material/inBetween.inputs:trueResult>
                float inputs:in2.connect = </Root/Material/inBetween.inputs:falseResult>
                float inputs:value1.connect = </Root/Material/inBetween.inputs:value>
                float inputs:value2.connect = </Root/Material/inBetween.inputs:lowerBound>
                float outputs:out
                float2 ui:nodegraph:node:pos = (367.58896, -107.577194)
                float2 ui:nodegraph:node:size = (115, 163)
                int ui:nodegraph:node:stackingOrder = 995
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1"]
            }
        }
    }
}

